//#define ЛОГ_СОБЫТИЙ//"логгирование" вызова предопределенных процедур
//#define _БайтКод//вывод байт кода в файл c:\debug.txt

//Поддержка визуального редактирования
Перем НомерРедактируемойСтроки;
Перем НомерНовойСтроки;
Перем глНачатоРедактирование;
Перем Таблица;//Таблица:Grid


Перем Пусто;
Перем ФормаДиалоговогоЭлемента;//форма, на которой лежат диалоговые элементы данного типа

//___________________________________________________________________________________________
//Переопределенные методы
//___________________________________________________________________________________________
Процедура НоваяСтрока()Экспорт
	БазовыйОбъект.НоваяСтрока();
	КоличествоСтрок=КоличествоСтрок();
	Таблица.КоличествоСтрок(1+КоличествоСтрок);
	Таблица.ТекущаяСтрока(КоличествоСтрок);
	ТекСтрока=КоличествоСтрок;
КонецПроцедуры//НоваяСтрока
//___________________________________________________________________________________________
Функция НомерСтроки()Экспорт
	Возврат Таблица.СтрокаОтображения();	 
КонецФункции//НомерСтроки

//___________________________________________________________________________________________
//Динамическое получение атрибутов
Функция ПолучитьАтрибут(Имя)Экспорт
	_НомерСтроки=БазовыйОбъект.НомерСтроки;
	
	ТекСтрока=Таблица.СтрокаОтображения();
	Если ТекСтрока>0 Тогда//режим автовычисления формул при отрисовке таблицы...
		БазовыйОбъект.НомерСтроки=ТекСтрока;
	КонецЕсли
	
	
	Попытка
		Результат=БазовыйОбъект.ПолучитьАтрибут(Имя);
		БазовыйОбъект.НомерСтроки=_НомерСтроки;
		Возврат Результат;
	Исключение
		Ошибка(ОписаниеОшибки());
	КонецПопытки
КонецФункции
//
////___________________________________________________________________________________________
////
//Функция ПолучитьКоличествоАтрибутов()Экспорт
//	Возврат КоличествоСтрок();
//КонецФункции//ПолучитьКоличествоАтрибутов
//
////___________________________________________________________________________________________
////
//Функция ПолучитьИмяАтрибута(Число Номер)Экспорт
//	Возврат Номер;
//КонецФункции//ПолучитьИмяАтрибута

//___________________________________________________________________________________________
//Новые методы
//___________________________________________________________________________________________
Функция ТекущийНомерКолонки()Экспорт
	Возврат Таблица.ТекущаяКолонка()+1;
КонецФункции//ТекущийНомерКолонки

//___________________________________________________________________________________________
Процедура АктивизироватьЯчейку(НомСтр,НомКол)Экспорт
	Таблица.Активизировать(Число(НомСтр),Число(НомКол)-1);
КонецПроцедуры//Активизировать


//___________________________________________________________________________________________
Функция ИмяИлиНомер(СтрНом)
	Если ТипЗначения(СтрНом)=1 Тогда
		Возврат СтрНом-1;
	Иначе
		Возврат Строка(СтрНом);
	КонецЕсли
КонецФункции//ИмяИлиНомер

//___________________________________________________________________________________________
Функция ИдентификаторКолонки(НомКолонки,Значение)Экспорт
	Попытка
		Возврат Таблица.ИдентификаторКолонки(ИмяИлиНомер(НомКолонки),Значение);
	Исключение
		Ошибка(ОписаниеОшибки());
	КонецПопытки
КонецФункции//ИдентификаторКолонки

//___________________________________________________________________________________________
Функция ТипКолонки(НомКолонки,Значение)Экспорт
	Попытка
		Возврат Таблица.ТипКолонки(ИмяИлиНомер(НомКолонки),Значение);
	Исключение
		Ошибка(ОписаниеОшибки());
	КонецПопытки
КонецФункции//ТипКолонки
//___________________________________________________________________________________________
Функция ДоступностьКолонки(НомКолонки,Значение)Экспорт
	Попытка
		Возврат Таблица.ДоступностьКолонки(ИмяИлиНомер(НомКолонки),Значение);
	Исключение
		Ошибка(ОписаниеОшибки());
	КонецПопытки
КонецФункции//ДоступностьКолонки
//___________________________________________________________________________________________
Функция ЗаголовокКолонки(НомКолонки,Значение)Экспорт
	Попытка
		Возврат Таблица.ЗаголовокКолонки(ИмяИлиНомер(НомКолонки),Значение);
	Исключение
		Ошибка(ОписаниеОшибки());
	КонецПопытки
КонецФункции//ЗаголовокКолонки
//___________________________________________________________________________________________
Функция ВидимостьКолонки(НомКолонки,Флаг)Экспорт
	Попытка
		Возврат Таблица.ВидимостьКолонки(ИмяИлиНомер(НомКолонки),Флаг);
	Исключение
		Ошибка(ОписаниеОшибки());
	КонецПопытки
КонецФункции//ВидимостьКолонки
//___________________________________________________________________________________________
Функция ПереходКолонки(НомКолонки,Флаг)Экспорт
	Попытка
		Возврат Таблица.ПереходКолонки(ИмяИлиНомер(НомКолонки),Флаг);
	Исключение
		Ошибка(ОписаниеОшибки());
	КонецПопытки
КонецФункции//ПереходКолонки
//___________________________________________________________________________________________
Функция ДлинаКолонки(НомКолонки,Значение)Экспорт
	Попытка
		Возврат Таблица.ДлинаКолонки(ИмяИлиНомер(НомКолонки),Значение);
	Исключение
		Ошибка(ОписаниеОшибки());
	КонецПопытки
КонецФункции//ДлинаКолонки
//___________________________________________________________________________________________
Функция ТочностьКолонки(НомКолонки,Значение)Экспорт
	Попытка
		Возврат Таблица.ТочностьКолонки(ИмяИлиНомер(НомКолонки),Значение);
	Исключение
		Ошибка(ОписаниеОшибки());
	КонецПопытки
КонецФункции//ТочностьКолонки
//___________________________________________________________________________________________
Функция ФормулаКолонки(НомКолонки,Значение)Экспорт
	Попытка
		Возврат Таблица.ФормулаКолонки(ИмяИлиНомер(НомКолонки),Значение);
	Исключение
		Ошибка(ОписаниеОшибки());
	КонецПопытки
КонецФункции//ФормулаКолонки

//___________________________________________________________________________________________
Процедура Обновить()Экспорт
	Таблица.Обновить();
КонецПроцедуры//Обновить


//___________________________________________________________________________________________
Функция КоличествоФиксКолонок()Экспорт
	Возврат Таблица.КоличествоФиксКолонок();
КонецФункции//КоличествоФиксКолонок

//___________________________________________________________________________________________
Процедура ТекущаяЯчейка(НомСтр,НомКол)Экспорт
	Таблица.ТекущаяЯчейка(НомСтр,НомКол-1);
КонецПроцедуры//ТекущаяЯчейка

//___________________________________________________________________________________________
Функция Модифицированность(УстФлаг)Экспорт
	Возврат Таблица.Модифицированность(УстФлаг);
КонецФункции//Модифицированность


//___________________________________________________________________________________________
//Конструктор (вызывается при инициализации объекта)
//ВидОбъекта - вид объекта, задающийся строкой следуемой за символом "."
//Элемент - произвольный параметр (для визуальных элементов - объект базового класса)
Функция Конструктор(ВидОбъекта,Элемент)
	НомерНовойСтроки=0;
	НомерРедактируемойСтроки=0;
	
	Если ТипЗначения(Элемент)=100 Тогда
		Таблица=Элемент;
		ИнициализацияВизуальнойСтруктуры();
	КонецЕсли;
КонецФункции//Конструктор

//___________________________________________________________________________________________
//Обрабочик событий визуального объекта
//Возвращает:
//0 - событие не обработано (передается в форму для дальнейшей обработки)
//1 - событие обработано (далее в форму не передается)
//ИмяСобытия - имя события как оно задано в окне свойств конфигуратора
Функция ОбработкаСобытия(ИмяСобытия,НомСтр,НомКол,ТекЗначение,НомКартинки,НомФормат,НомЦветТекста,НомЦветФона) Экспорт
	Если ИмяСобытия="Виртуальный режим" Тогда
		Рез=БазовыйОбъект.ОбработкаСобытия(ИмяСобытия,НомСтр,НомКол,ТекЗначение,НомКартинки,НомФормат,НомЦветТекста,НомЦветФона);
		Возврат Рез;
	КонецЕсли
	
	Если ПроверкаОкончанияРедактирования()=0 Тогда
		Возврат 1;
	КонецЕсли
	
	
	
	
	//Если ИмяСобытия="Левая кнопка" Тогда
	Если ИмяСобытия="Двойн.лев.кнопка" Тогда
		Если Таблица.КоличествоСтрок()=Таблица.КоличествоФиксСтрок() Тогда
			НоваяСтрока();
			НомерНовойСтроки=0;
		КонецЕсли
	ИначеЕсли ИмяСобытия="Нажатие клавиши" Тогда
		//Сообщить(ИмяСобытия+" = "+НажатаяКлавиша());
		Если СостояниеКлавиши("CONTROL") Тогда//асинхронное получение состояния управляющей клавиши
			Возврат 0;
		КонецЕсли
		
		НомерРедактируемойСтроки=0;
		Если НажатаяКлавиша()=27 Тогда//ESCAPE
			Возврат РедакторОтменитьВводНовойСтроки();
		ИначеЕсли НажатаяКлавиша()=45 Тогда//INSERT
			РедакторНоваяСтрока();
			Возврат 1;
		ИначеЕсли НажатаяКлавиша()=46 Тогда//DEL
			РедакторУдалитьСтроку();
			Возврат 1;
		ИначеЕсли НажатаяКлавиша()=116 Тогда//F5
			РедакторОбновить();
		ИначеЕсли НажатаяКлавиша()=120 Тогда//F9
			РедакторКопироватьСтроку();
		КонецЕсли
	ИначеЕсли ИмяСобытия="Начало редактирования" Тогда
		РедакторНачалоРедактирования();
	ИначеЕсли ИмяСобытия="Окончание редактирования" Тогда
		//Сообщить("Окончание редактирования");
		ФормаДиалоговогоЭлемента.Форма.ОбновитьВыражения();
		Если СостояниеКлавиши("ESCAPE") Тогда
			РедакторОтменитьВводНовойСтроки();
		Иначе
			РедакторОкончаниеРедактированияЯчейки();
		КонецЕсли
	ИначеЕсли ИмяСобытия="Значение" Тогда//установка значения в виртуальном режиме отображения данных (при редактировании или вычислении формул)
		Если НомСтр>0 И НомСтр<=КоличествоСтрок() Тогда
			УстановитьЗначение(НомСтр,1+НомКол,ТекЗначение);
		КонецЕсли
	КонецЕсли
	
	ТекСтрока=Таблица.ТекущаяСтрока();
	Если ТекСтрока Тогда
		ПолучитьСтрокуПоНомеру(ТекСтрока);
	КонецЕсли
	Возврат 0;//0 - передаем управление пользовательскому обработчику
КонецФункции//ОбработкаСобытия







//******************************************************************************************
//******************************************************************************************
//Обработка редактирования и ввода новых строк
//******************************************************************************************
//******************************************************************************************

//___________________________________________________________________________________________
Функция РедакторНачалоРедактирования()
	Если НомерНовойСтроки Тогда
		ПриРедактированииНовойСтроки();
	Иначе
		ПриНачалеРедактированияСтроки();
	КонецЕсли
	
	Если СтатусВозврата()=0 Тогда
		Возврат 1;
	КонецЕсли
	НомерРедактируемойСтроки=ТекущаяСтрока();
	
	//	Возврат 0;
	
	НомерРедактируемойСтроки=Макс(1,ТекущаяСтрока());
	НомерКолонки=Макс(1,ТекущийНомерКолонки());
	Если СостояниеКлавиши("F2")=0 Тогда//НомерНовойСтроки=0 И
		ТекЗначение=ПолучитьЗначение(НомерРедактируемойСтроки,НомерКолонки);
		ТекЗначение=ЗначениеИзСтроки(ЗначениеВСтроку(ТекЗначение));//убираем ссылочность
		Если ТипЗначения(ТекЗначение)>5 И (НомерНовойСтроки>0)Тогда
			ИдентЭлемДиалога=ИдентификаторКолонки(НомерКолонки,Пусто);
			ФлагСтандОбр=1;
			ПриНачалеВыбораЗначения(ИдентЭлемДиалога,ФлагСтандОбр);
			
			Если ФлагСтандОбр Тогда
				Если ТекЗначение.Выбрать() Тогда
					ФлагСтандОбр=1;
					ОбработкаВыбораЗначения(ТекЗначение,ИдентЭлемДиалога,ФлагСтандОбр)
					
					Если ФлагСтандОбр Тогда
						УстановитьЗначение(НомерРедактируемойСтроки,НомерКолонки,ТекЗначение);
						Таблица.Обновить();
					КонецЕсли
				КонецЕсли
			КонецЕсли
			Возврат 1;
		КонецЕсли
	КонецЕсли
	Возврат 0;
КонецФункции//РедакторНачалоРедактирования


//___________________________________________________________________________________________
//функция находит колонку которую можно активизировать
Функция ПолучитьКолонкуДляАктивации(Знач НачНомер=0)
	Если НачНомер=0 Тогда
		НачНомер=1+КоличествоФиксКолонок();
	КонецЕсли
	Для А=НачНомер По КоличествоКолонок() Цикл
		Если ВидимостьКолонки(А,Пусто)=1 И ДоступностьКолонки(А,Пусто)=1 Тогда
			Возврат А;
			Прервать;
		КонецЕсли
	КонецЦикла
	Возврат 0;
КонецФункции//ПолучитьКолонкуДляАктивации

//___________________________________________________________________________________________
Процедура РедакторНоваяСтрока()
	ПриВводеСтроки();
	Если СтатусВозврата()=0 Тогда
		Возврат;
	КонецЕсли
	
	
	
	НомерПредыдущейСтроки=ТекущаяСтрока();//для копирования начального значения
	//новая строка
	НоваяСтрока();
	НомерРедактируемойСтроки=КоличествоСтрок();
	НомерНовойСтроки=КоличествоСтрок();
	
	//находим колонку которую следует активизировать
	НомерПервойКолонки=ПолучитьКолонкуДляАктивации();
	Если НомерПервойКолонки=0 Тогда
		Возврат;//нет доступных колонок
	КонецЕсли
	
	//копируем предыдущее значение (на котором был установлен курсор)
	Если НомерПредыдущейСтроки Тогда
		Значение=ПолучитьЗначение(НомерПредыдущейСтроки,НомерПервойКолонки)
		Значение=ЗначениеИзСтроки(ЗначениеВСтроку(Значение));//убираем ссылочность агрегатных объектов
		УстановитьЗначение(НомерРедактируемойСтроки,НомерПервойКолонки,Значение);
	КонецЕсли
	
	АктивизироватьЯчейку(НомерРедактируемойСтроки,НомерПервойКолонки);
КонецПроцедуры//РедакторНоваяСтрока


//___________________________________________________________________________________________
Процедура РедакторОкончаниеРедактированияЯчейки()
	//выполнение формулы-события (если есть)
	//ФормаДиалоговогоЭлемента
	НомКол=ТекущаяКолонка()
	Если НомКол>0 Тогда
		Стр=ФормулаКолонки(НомКол,Пусто);
		Если НЕ ПустоеЗначение(Стр) Тогда
			БазовыйОбъект.НомерСтроки=Таблица.ТекущаяСтрока()
			Выражение(Стр,ФормаДиалоговогоЭлемента);
		КонецЕсли
	КонецЕсли
	
	
	//проверка режима редактирования отдельной ячейки
	Если НомерНовойСтроки=0 Тогда
		РедакторОкончаниеРедактированияСтроки();
		Возврат;
	КонецЕсли
	
	//иначе это режим ввода новой строки
	
	Если СостояниеКлавиши("TAB") Тогда//навигация по одной и той же строке
		Возврат;
	ИначеЕсли НЕ СостояниеКлавиши("RETURN") Тогда
		Возврат;
	КонецЕсли
	
	
	//находим колонку которую следует активизировать
	НомерСледующейКолонки=ПолучитьКолонкуДляАктивации(ТекущийНомерКолонки()+1);
	Если НомерСледующейКолонки=0 Тогда
		РедакторОкончаниеРедактированияСтроки();
		Возврат;//нет доступных колонок
	КонецЕсли
	АктивизироватьЯчейку(НомерРедактируемойСтроки,НомерСледующейКолонки);
КонецПроцедуры//РедакторОкончаниеРедактированияЯчейки


//___________________________________________________________________________________________
//Функция возвращает 1-ОК, 0 - при запрете окончания редактирования
Функция РедакторОкончаниеРедактированияСтроки()
	//Сообщить("РедакторОкончаниеРедактированияСтроки = "+НомерРедактируемойСтроки);
	Если НомерРедактируемойСтроки Тогда
		ПриОкончанииРедактированияСтроки();
		Если СтатусВозврата()=0 Тогда
			НомерСледующейКолонки=ПолучитьКолонкуДляАктивации(ТекущийНомерКолонки());
			Если НомерСледующейКолонки=0 Тогда
				НомерСледующейКолонки=ПолучитьКолонкуДляАктивации(1);
			КонецЕсли
			
			АктивизироватьЯчейку(НомерРедактируемойСтроки,НомерСледующейКолонки);
			Возврат 0;
		КонецЕсли
	КонецЕсли
	
	НомерРедактируемойСтроки=0;
	НомерНовойСтроки=0;
	Возврат 1;
КонецФункции//РедакторОкончаниеРедактированияСтроки



//___________________________________________________________________________________________
Процедура РедакторУдалитьСтроку(ФлСообщений=1)
	ТекСтрока=ТекущаяСтрока();
	Если ТекСтрока>0 Тогда
		Если ФлСообщений Тогда
			ПриУдаленииСтроки();
			Если СтатусВозврата()=0 Тогда
				Возврат;
			КонецЕсли
		КонецЕсли
		
		Если ТекСтрока=1 И Таблица.КоличествоСтрок()=1 Тогда
			УдалитьСтроки();
		Иначе
			Перем ТекКолонка;
			ТекКолонка=1+Таблица.ТекущаяКолонка();
			УдалитьСтроку(ТекСтрока);
			Если ТекСтрока>Таблица.КоличествоСтрок()-1 Тогда
				ТекСтрока=Таблица.КоличествоСтрок()-1;
			КонецЕсли
			ТекущаяЯчейка(ТекСтрока,ТекКолонка);
		КонецЕсли
		НомерРедактируемойСтроки=0;
		НомерНовойСтроки=0;
	КонецЕсли
КонецПроцедуры//РедакторУдалитьСтроку

//___________________________________________________________________________________________
Функция РедакторОтменитьВводНовойСтроки()
	Возврат 0;//временно отмена не работает!!!
	//	Если НомерНовойСтроки>0 Тогда
	//		ТекущаяСтрока(НомерНовойСтроки-1);
	//		РедакторУдалитьСтроку(0);
	//		Возврат 1;
	//	КонецЕсли
	//	НомерРедактируемойСтроки=0;
	//	НомерНовойСтроки=0;
	//	Возврат 0;
КонецФункции//РедакторОтменитьВводНовойСтроки


//___________________________________________________________________________________________
Процедура РедакторКопироватьСтроку()
	НомерйСтрокиИсточника=ТекущаяСтрока();
	Если НомерйСтрокиИсточника>0 Тогда
		НоваяСтрока();
		НомерНовойСтроки=ТекущаяСтрока();
		Для А=1 По ПолучитьКоличествоАтрибутов() Цикл
			УстановитьЗначение(НомерНовойСтроки,А,ПолучитьЗначение(НомерйСтрокиИсточника,А));
		КонецЦикла
		ТекущаяСтрока(НомерНовойСтроки);
		НомерРедактируемойСтроки=НомерНовойСтроки;
		НомерНовойСтроки=НомерНовойСтроки;
	КонецЕсли
	//	Таблица.ПерерисоватьОкно();
КонецПроцедуры//РедакторКопироватьСтроку


//___________________________________________________________________________________________
Процедура РедакторОбновить()
	//пусто...
КонецПроцедуры//РедакторОбновить


//___________________________________________________________________________________________
//Создание структуры ТЗ по той структуре, которая задана в конфигураторе
Процедура ИнициализацияВизуальнойСтруктуры()
	ЗаданыИдентификаторы=0;
	КоличествоКолонок=Таблица.КоличествоКолонок();
	Для А=0 По КоличествоКолонок-1 Цикл
		Если Сокрлп(Таблица.ИдентификаторКолонки(А))<>"" Тогда
			ЗаданыИдентификаторы=1;
			Прервать;
		КонецЕсли
	КонецЦикла
	
	Перем МасКолонок=СоздатьОбъект("Массив");
	Если ЗаданыИдентификаторы=1 Тогда//заданы колонки в визуальной структуре таблицы
		//сначала загружаем параметры в массив
		Для А=1 По КоличествоКолонок Цикл
			ИдентификаторКолонки=Таблица.ИдентификаторКолонки(А-1);
			Если ПустоеЗначение(ИдентификаторКолонки)=1 Тогда
				ИдентификаторКолонки="_"+А;
			КонецЕсли
			МасКолонок[А]["ИдентификаторКолонки"]=ИдентификаторКолонки;
			МасКолонок[А]["ТипКолонки"]=Таблица.ТипКолонки(А-1);
			МасКолонок[А]["ЗаголовокКолонки"]=Таблица.ЗаголовокКолонки(А-1);
			МасКолонок[А]["ШиринаКолонки"]=Таблица.ШиринаКолонки(А-1);
			МасКолонок[А]["ВидимостьКолонки"]=Таблица.ВидимостьКолонки(А-1);
			МасКолонок[А]["ДоступностьКолонки"]=Таблица.ДоступностьКолонки(А-1);
			МасКолонок[А]["ПереходКолонки"]=Таблица.ПереходКолонки(А-1);
			МасКолонок[А]["ДлинаКолонки"]=Таблица.ДлинаКолонки(А-1);
			МасКолонок[А]["ТочностьКолонки"]=Таблица.ТочностьКолонки(А-1);
			МасКолонок[А]["ФормулаКолонки"]=Таблица.ФормулаКолонки(А-1);
			
			Если ПустоеЗначение(МасКолонок[А].ЗаголовокКолонки)=1 Тогда
				МасКолонок[А].ЗаголовокКолонки=МасКолонок[А].ИдентификаторКолонки;
			КонецЕсли
			
		КонецЦикла;
	КонецЕсли
	
	//теперь создаем колонки
	Для А=1 По РазмерМассива(МасКолонок) Цикл
		НоваяКолонка(МасКолонок[А].ИдентификаторКолонки,МасКолонок[А].ТипКолонки,,,МасКолонок[А].ЗаголовокКолонки,МасКолонок[А].ШиринаКолонки/5);
		Таблица.ИдентификаторКолонки(А-1,МасКолонок[А].ИдентификаторКолонки);
		Таблица.ТипКолонки(А-1,МасКолонок[А].ТипКолонки);
		Таблица.ЗаголовокКолонки(А-1,МасКолонок[А].ЗаголовокКолонки);
		Таблица.ШиринаКолонки(А-1,МасКолонок[А].ШиринаКолонки);
		Таблица.ВидимостьКолонки(А-1,МасКолонок[А].ВидимостьКолонки);
		Таблица.ДоступностьКолонки(А-1,МасКолонок[А].ДоступностьКолонки);
		Таблица.ПереходКолонки(А-1,МасКолонок[А].ПереходКолонки);
		Таблица.ДлинаКолонки(А-1,МасКолонок[А].ДлинаКолонки);
		Таблица.ТочностьКолонки(А-1,МасКолонок[А].ТочностьКолонки);
		Таблица.ФормулаКолонки(А-1,МасКолонок[А].ФормулаКолонки);
	КонецЦикла;
КонецПроцедуры//ИнициализацияВизуальнойСтруктуры



//___________________________________________________________________________________________
//Гарантированный возврат номера колонки
//В качестве параметра может задаваться номер или имя колонки
Функция НомерКолонки(Знач Номер)
	Если ТипЗначения(Номер)=2 Тогда//Это имя колонки
		Попытка
			Номер=Таблица.ИдентификаторКолонки(Номер)+1;
		Исключение
			Ошибка(ОписаниеОшибки());
		КонецПопытки
	КонецЕсли
	Если Номер<1 Тогда
		Ошибка("Неправильный номер колонки");
	КонецЕсли
	Возврат Номер-1;
КонецФункции//НомерКолонки







//___________________________________________________________________________________________
//Метод вызывается один раз для каждого вида документа при начале работы системы
//Он выполняет верификацию таблицу БД для набора реквизитов табличной части документа
Функция НачальнаяИнициализация(ТипОбъекта,Вид,МультиКонфигурации,ВидБД)Экспорт
	//Табличная часть
	Мета=СоздатьОбъект("Метаданные").Массив.Метаданные;
	МетаОбъект=Мета[ТипОбъекта][Вид]["Табличная часть"];
	Если РазмерСтруктуры(МетаОбъект)>0 Тогда
		ТаблицаДок=СоздатьОбъект("ТаблицаБД");
		ТаблицаДок.ДобавитьПоле("ТекущийДокумент","Документ");
		ТаблицаДок.ДобавитьПоле("ПериодДвижения","Число",17,0);
		ТаблицаДок.ДобавитьПоле("НомерСтроки","Число",17,0);
		Для Б=1 По РазмерСтруктуры(МетаОбъект) Цикл
			Имя=МетаОбъект.ИдентификаторПоНомеру(Б);
			//Проверки
			Если Врег(Имя)="ТЕКУЩИЙДОКУМЕНТ" Тогда
				Продолжить;
			ИначеЕсли Врег(Имя)="ПЕРИОДДВИЖЕНИЯ" Тогда
				Продолжить;
			ИначеЕсли Врег(Имя)="НОМЕРСТРОКИ" Тогда
				Продолжить;
			КонецЕсли
			ИдентификаторРеквизитаБД=ПолучитьИдентификаторБД(ТипОбъекта+"/"+Вид+"/Табличная часть/"+Имя);
			//ИдентификаторРеквизитаБД="";//пока так!
			ТаблицаДок.ДобавитьПоле(Имя,МетаОбъект[Имя].Тип,МетаОбъект[Имя].Длина,МетаОбъект[Имя].Точность,ИдентификаторРеквизитаБД);
		КонецЦикла;
		
		ТипВид=ТипОбъекта+"."+Вид+".ТабличнаяЧасть";
		Если ПустоеЗначение(ВидБД)=1 Тогда
			ТипВидБД=ТипВид;
		Иначе
			ТипВидБД=ТипОбъекта+"."+ВидБД+".ТабличнаяЧасть";
		КонецЕсли
		
		ТаблицаДок.НачальнаяИнициализация(ТипВид,"DT",0,МультиКонфигурации,ТипВидБД);
		Возврат 1;
	КонецЕсли
	Возврат 0;
КонецФункции//НачальнаяИнициализация


//___________________________________________________________________________________________
//Предопределенная процедура первичной инициализации диалоговых элементов на форме
Процедура ИнициализацияОбъекта(Конт,Идентификатор)Экспорт
	ФормаДиалоговогоЭлемента=Конт;
КонецПроцедуры//ИнициализацияОбъекта




//___________________________________________________________________________________________
Функция ПроверкаОкончанияРедактирования()
	ТекСтрока=Таблица.ТекущаяСтрока();
	Если НомерРедактируемойСтроки Тогда
		Если ТекСтрока<>НомерРедактируемойСтроки Тогда
			Если РедакторОкончаниеРедактированияСтроки()=0 Тогда
				Возврат 0;//пользователь запретил отмену редактирования
			КонецЕсли
		КонецЕсли
		Если ТекСтрока<>НомерНовойСтроки Тогда
			НомерНовойСтроки=0;
		КонецЕсли
	КонецЕсли
	Возврат 1;
КонецФункции//ПроверкаОкончанияРедактирования




//поддержка предопределенных процедур модуля формы
//___________________________________________________________________________________________
Процедура ПриРедактированииНовойСтроки()
#ifdef ЛОГ_СОБЫТИЙ
	Сообщить("ПриРедактированииНовойСтроки");
#endif
	СтатусВозврата(1);
	Если ТипЗначения(ФормаДиалоговогоЭлемента)=100 Тогда
		БазовыйОбъект.НомерСтроки=Таблица.ТекущаяСтрока()
		ФормаДиалоговогоЭлемента.Функция("#ПриРедактированииНовойСтроки");
		ФормаДиалоговогоЭлемента.Функция("#OnNewLine");
	КонецЕсли
	//ПриНачалеРедактированияСтроки();
КонецПроцедуры//ПриРедактированииНовойСтроки

//___________________________________________________________________________________________
Процедура ПриВводеСтроки()
#ifdef ЛОГ_СОБЫТИЙ
	Сообщить("ПриВводеСтроки");
#endif
	СтатусВозврата(1);
	Если ТипЗначения(ФормаДиалоговогоЭлемента)=100 Тогда
		БазовыйОбъект.НомерСтроки=Таблица.ТекущаяСтрока()
		ФормаДиалоговогоЭлемента.Функция("#ПриВводеСтроки");
		ФормаДиалоговогоЭлемента.Функция("#OnNewLine");
	КонецЕсли
	//ПриНачалеРедактированияСтроки();
КонецПроцедуры//ПриВводеСтроки

//___________________________________________________________________________________________
Процедура ПриОкончанииРедактированияСтроки()
#ifdef ЛОГ_СОБЫТИЙ
	Сообщить("ПриОкончанииРедактированияСтроки");
#endif
	
	СтатусВозврата(1);
	ФлагНовСтроки=0;
	Если НомерНовойСтроки Тогда
		ФлагНовСтроки=1;//признак окончания редактирования новой строки
	КонецЕсли
	
	Если ТипЗначения(ФормаДиалоговогоЭлемента)=100 Тогда
		БазовыйОбъект.НомерСтроки=Таблица.ТекущаяСтрока()
		ФормаДиалоговогоЭлемента.Функция("#ПриОкончанииРедактированияСтроки",ФлагНовСтроки);
		ФормаДиалоговогоЭлемента.Функция("#OnFinishLineEdit",ФлагНовСтроки);
	КонецЕсли
КонецПроцедуры//ПриОкончанииРедактированияСтроки


//___________________________________________________________________________________________
Процедура ПриУдаленииСтроки()
#ifdef ЛОГ_СОБЫТИЙ
	Сообщить("ПриУдаленииСтроки");
#endif
	СтатусВозврата(1);
	Если ТипЗначения(ФормаДиалоговогоЭлемента)=100 Тогда
		БазовыйОбъект.НомерСтроки=Таблица.ТекущаяСтрока()
		ФормаДиалоговогоЭлемента.Функция("#ПриУдаленииСтроки");
		ФормаДиалоговогоЭлемента.Функция("#OnDeleteLine");
	КонецЕсли
КонецПроцедуры//ПриУдаленииСтроки

//___________________________________________________________________________________________
Процедура ПриНачалеРедактированияСтроки()
#ifdef ЛОГ_СОБЫТИЙ
	Сообщить("ПриНачалеРедактированияСтроки");
#endif
	СтатусВозврата(1);
	Если ТипЗначения(ФормаДиалоговогоЭлемента)=100 Тогда
		БазовыйОбъект.НомерСтроки=Таблица.ТекущаяСтрока()
		ФормаДиалоговогоЭлемента.Функция("#ПриНачалеРедактированияСтроки");
		ФормаДиалоговогоЭлемента.Функция("#OnStartEditLine");
	КонецЕсли
КонецПроцедуры//ПриНачалеРедактированияСтроки

//___________________________________________________________________________________________
Процедура ПриНачалеВыбораЗначения(ИдентЭлемДиалога,ФлагСтандОбр)
#ifdef ЛОГ_СОБЫТИЙ
	Сообщить("ОбработкаВыбораЗначения");
#endif

	СтатусВозврата(1);
	Если ТипЗначения(ФормаДиалоговогоЭлемента)=100 Тогда
		БазовыйОбъект.НомерСтроки=Таблица.ТекущаяСтрока()
		ФормаДиалоговогоЭлемента.Функция("#ПриНачалеВыбораЗначения",ИдентЭлемДиалога,ФлагСтандОбр);
		ФормаДиалоговогоЭлемента.Функция("#OnStartValueChoice",ИдентЭлемДиалога,ФлагСтандОбр);
	КонецЕсли
КонецПроцедуры//ПриНачалеВыбораЗначения


//___________________________________________________________________________________________
Процедура ОбработкаВыбораЗначения(ВыбЗнач,ИдентЭлемДиалога,ФлагСтандОбр)
#ifdef ЛОГ_СОБЫТИЙ
	Сообщить("ОбработкаВыбораЗначения");
#endif

	СтатусВозврата(1);
	Если ТипЗначения(ФормаДиалоговогоЭлемента)=100 Тогда
		БазовыйОбъект.НомерСтроки=Таблица.ТекущаяСтрока()
		ФормаДиалоговогоЭлемента.Функция("#ОбработкаВыбораЗначения",ВыбЗнач,ИдентЭлемДиалога,ФлагСтандОбр);
		ФормаДиалоговогоЭлемента.Функция("#ProcessValueChoice",ВыбЗнач,ИдентЭлемДиалога,ФлагСтандОбр);
	КонецЕсли
КонецПроцедуры//ОбработкаВыбораЗначения

