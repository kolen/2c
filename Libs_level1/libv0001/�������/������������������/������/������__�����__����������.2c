//#Задать _БайтКод
Перем БД;
Перем МассивТипов;
Перем МассивТиповСтр;
Перем МассивДлин;
Перем МассивТочности;
//Перем НомерПроцесса Экспорт;

//БуферОбъектов:Массив
//БуферДанных:Массив




#Задать ПРОВЕРКА_ИНИЦИАЛИЗАЦИИ_БД Если БД=0 Тогда Ошибка("Выборка данных не была открыта (не был выполнен запрос)"); КонецЕсли




//___________________________________________________________________________________________
Функция ПолучитьАтрибут(Имя) Экспорт
	Возврат 0;
КонецФункции

//___________________________________________________________________________________________
Процедура УстановитьАтрибут(Имя,Значение) Экспорт

КонецПроцедуры
//___________________________________________________________________________________________
Процедура Конструктор(ВидОбъекта)
	//НомерПроцесса=глНомерПроцесса;
	БД=0;
//	Если глТекТипСоединения=-1 Тогда
//		 Возврат;
//	КонецЕсли
//	
//	Если глТекТипСоединения=6 Тогда
//		БД=СоздатьОбъект("SQLLite");
//	Иначе
//		БД=СоздатьОбъект("ЗапросSQL");
//	КонецЕсли
//	Соединение();
КонецПроцедуры


//___________________________________________________________________________________________
Функция Соединение() Экспорт
	Если БД=0 Тогда
		Если глТекТипСоединения=6 Тогда
			БД=СоздатьОбъект("SQLLite");
		Иначе
			БД=СоздатьОбъект("ЗапросSQL");
		КонецЕсли
	КонецЕсли
	
	Если глБылоСоединение<>1 Тогда
		ОткрытьФормуМодально("Параметры подключения",1);
		Если глТекТипСоединения=6 Тогда
			БД=СоздатьОбъект("SQLLite");
		Иначе
			БД=СоздатьОбъект("ЗапросSQL");
		КонецЕсли
	КонецЕсли;
	Возврат 1;
КонецФункции
//___________________________________________________________________________________________
Функция ВыбратьСоединение() Экспорт
	ОткрытьФормуМодально("Параметры подключения",0);
	Если глТекТипСоединения=6 Тогда
		БД=СоздатьОбъект("SQLLite");
	Иначе
		БД=СоздатьОбъект("ЗапросSQL");
	КонецЕсли
КонецФункции




//___________________________________________________________________________________________
//поддержка кэширования данных

//___________________________________________________________________________________________
//Поиск объекта в буфере по его ИД
//Возврашает:
// 0 - объект не найден
// 1 - объект найден + заполняет значение переменной Объект
Функция НайтиОбъект(Ид,Объект)Экспорт
#Если _БуферизацияОбъектов
	Если КонтрольВремениБуфера()=0 Тогда
		СброситьБуфер();
		//ОбновитьБуфер();
		Возврат 0;
	КонецЕсли

	СтрИд=Строка(Ид);
	Если БуферОбъектов.НайтиИдентификатор(СтрИд)=1 Тогда
		Объект=БуферОбъектов[СтрИд];
		Возврат 1;
	КонецЕсли
#КонецЕсли
	Возврат 0;
КонецФункции//НайтиОбъект

//___________________________________________________________________________________________
Процедура ДобавитьОбъект(Ид,Объект)Экспорт
#Если _БуферизацияОбъектов
	СтрИд=Строка(Ид);
	БуферОбъектов[СтрИд]=Объект;
	Попытка
	Объект.ТолькоЧтение(1);
	Исключение
	КонецПопытки
#КонецЕсли
КонецПроцедуры//ДобавитьОбъект

//___________________________________________________________________________________________
Процедура ОбновитьБуфер()
#Если _БуферизацияОбъектов
	Если ОбновлениеБуфера=1 Тогда
		 Возврат;
	КонецЕсли
	ОбновлениеБуфера=1;
	 
	Если ТипЗначения(БуферОбъектов)=0 Тогда
		БуферОбъектов=СоздатьОбъект("Структура");
	КонецЕсли

	Стр="SELECT ID FROM SP3  WHERE 	(ID=12884901907 AND COL10>3 ) OR (ID=12884901889 AND COL10>2)";
	Для А=1 По РазмерСтруктуры(БуферОбъектов) Цикл
		СтрИД=БуферОбъектов.ИдентификаторПоНомеру(А);
		Объект=БуферОбъектов[СтрИД];
		Попытка
		Объект.Актуальность(0);
		Исключение
		КонецПопытки
	КонецЦикла
		
	
	ВремяСозданияБуфера=_GetPerformanceCounter();
	ОбновлениеБуфера=0;
#КонецЕсли
КонецПроцедуры//ОбновитьБуфер


//___________________________________________________________________________________________
Процедура СброситьБуфер()Экспорт//очистка кэша перед выполнением критической операции (например: проведением документа)
#Если _БуферизацияОбъектов
	Если ОбновлениеБуфера=1 Тогда
		 Возврат;
	КонецЕсли
	ВремяСозданияБуфера=_GetPerformanceCounter();

	Если ТипЗначения(БуферОбъектов)=0 Тогда
		БуферОбъектов=СоздатьОбъект("Структура");
	КонецЕсли
	ОбновлениеБуфера=1;
	Для А=1 По РазмерСтруктуры(БуферОбъектов) Цикл
		СтрИД=БуферОбъектов.ИдентификаторПоНомеру(А);
		Объект=БуферОбъектов[СтрИД];
		Попытка
		Объект.Актуальность(0);
		Исключение
		КонецПопытки
	КонецЦикла
	ОбновлениеБуфера=0;
	
	
	ВремяСозданияБуфера=_GetPerformanceCounter();
#КонецЕсли
КонецПроцедуры
//___________________________________________________________________________________________
#Если _БуферизацияОбъектов
Функция КонтрольВремениБуфера()
	Если _GetPerformanceCounter()-ВремяСозданияБуфера>ПериодОбновленияБуфера Тогда
		Возврат 0;
	КонецЕсли
	Возврат 1;
КонецФункции
#КонецЕсли


////___________________________________________________________________________________________
//Процедура Тест()Экспорт Виртуально
//КонецПроцедуры//Тест


//___________________________________________________________________________________________
Функция Запрос(Текст) Экспорт
	//Контекст.Тест()

	Соединение();
	
	Если глВестиЛог=1 Тогда
		Сообщить(Текст);
	КонецЕсли;
	
НачалоЗапроса:	
	Рез=0;
	Попытка
		Рез=БД.Запрос(Текст);
	Исключение//ошибка будет ссылаться на строку, из которой произошел вызов метода объекта
		Если Сокрлп(ОписаниеОшибки())="database is locked" Тогда
			 Пауза(100);
			 Перейти НачалоЗапроса;
		КонецЕсли
	
		Ошибка(""""+ОписаниеОшибки()+""""+Симв(13)+"Текст запроса:"+Симв(13)+Текст);
	КонецПопытки
	
	Возврат Рез;
КонецФункции


//___________________________________________________________________________________________
Функция ПолучитьИменаПолей() Экспорт
	ПРОВЕРКА_ИНИЦИАЛИЗАЦИИ_БД
	Возврат БД.ПолучитьИменаПолей();//массив
КонецФункции

//___________________________________________________________________________________________
Функция КоличествоПолей() Экспорт
	ПРОВЕРКА_ИНИЦИАЛИЗАЦИИ_БД
	Возврат БД.КоличествоПолей();
КонецФункции

//___________________________________________________________________________________________
Функция ПолучитьСтроку() Экспорт
	ПРОВЕРКА_ИНИЦИАЛИЗАЦИИ_БД
	Возврат БД.ПолучитьСтроку();
КонецФункции

//___________________________________________________________________________________________
Функция ПолучитьПоле(Номер) Экспорт//Номер - индекс поля начиная с 1
	ПРОВЕРКА_ИНИЦИАЛИЗАЦИИ_БД
	Возврат БД.ПолучитьПоле(Номер);
КонецФункции

//___________________________________________________________________________________________
Функция ПолучитьЗначенияПолей() Экспорт//Получить одну строку выборки в массив (со всеми полями)
	ПРОВЕРКА_ИНИЦИАЛИЗАЦИИ_БД
	Возврат БД.ПолучитьЗначенияПолей();
КонецФункции

//___________________________________________________________________________________________
Функция ПолучитьВсеЗначения() Экспорт//Получить всю выборку в массив (со всеми строкми и полями)
	ПРОВЕРКА_ИНИЦИАЛИЗАЦИИ_БД
	Возврат БД.ПолучитьВсеЗначения();
КонецФункции

//___________________________________________________________________________________________
Функция ВыбратьСтроки()Экспорт
	ПРОВЕРКА_ИНИЦИАЛИЗАЦИИ_БД
	Возврат БД.ВыбратьСтроки();
КонецФункции



Функция СуществуетТаблица(Имя) Экспорт
	Соединение();
	Возврат БД.СуществуетТаблица(Имя);
КонецФункции

Функция ПолучитьИдентификаторСтроки() Экспорт
	ПРОВЕРКА_ИНИЦИАЛИЗАЦИИ_БД
	Возврат БД.ПолучитьИдентификатор();
КонецФункции


//___________________________________________________________________________________________
Процедура СброситьТранзакции()
	Если глНачатоТранзакций>0 Тогда
		Попытка
		БД.ОтменитьТранзакцию();
		Исключение
		КонецПопытки
	КонецЕсли
	глНачатоТранзакций=0;
#Если _БуферизацияОбъектов
	СброситьБуфер();
#КонецЕсли
КонецПроцедуры//СброситьТранзакции


//___________________________________________________________________________________________
Процедура НачатьТранзакцию() Экспорт
	Соединение();
	Если ЕстьНеОбработаннаяОшибка()=1 Тогда//Первая транзакция после ошибки, которая не была обработана программой (т.е. было вываливание в окно сообщений и прерывание работы)
		СброситьТранзакции();
		ЕстьНеОбработаннаяОшибка(0);
	КонецЕсли
	
	глНачатоТранзакций=Число(глНачатоТранзакций)+1;
	//Сообщить("Начало "+глНачатоТранзакций);
	Если глНачатоТранзакций>1 Тогда
		 Возврат;
	ИначеЕсли глНачатоТранзакций<=0 Тогда
		 Ошибка("Количество начатых транзакций = "+глНачатоТранзакций+" (возможно не было Сброса транзакций после ошибки)");;
	КонецЕсли

#Если _БуферизацияОбъектов
	СброситьБуфер();
#КонецЕсли

	
	БД.НачатьТранзакцию();
КонецПроцедуры


//___________________________________________________________________________________________
Процедура ЗафиксироватьТранзакцию() Экспорт
	Соединение();
	
	глНачатоТранзакций=Число(глНачатоТранзакций)-1;
	//Сообщить("Конец "+глНачатоТранзакций);
	Если глНачатоТранзакций>0 Тогда
		 Возврат;
	ИначеЕсли глНачатоТранзакций<0 Тогда
		 Ошибка("Количество команд ЗафиксироватьТранзакцию превышает количество команд НачатьТранзакцию");;
	КонецЕсли
	
	
#Если _БуферизацияОбъектов
	СброситьБуфер();
#КонецЕсли
	БД.ЗафиксироватьТранзакцию();
КонецПроцедуры

//___________________________________________________________________________________________
Процедура ОтменитьТранзакцию() Экспорт
	Соединение();
	
	глНачатоТранзакций=Число(глНачатоТранзакций)-1;
	//Сообщить("Отмена "+глНачатоТранзакций);
	Если глНачатоТранзакций>0 Тогда
		 глНачатоТранзакций=0;
		 БД.ОтменитьТранзакцию();
		 Ошибка("Данная версия объекта не поддерживает отмену вложенных транзакций");
	ИначеЕсли глНачатоТранзакций<0 Тогда
		 Ошибка("Количество команд ОтменитьТранзакцию/ЗафиксироватьТранзакцию превышает количество команд НачатьТранзакцию");;
	КонецЕсли


#Если _БуферизацияОбъектов
	СброситьБуфер();
#КонецЕсли
	БД.ОтменитьТранзакцию();
КонецПроцедуры


//___________________________________________________________________________________________
Функция ТипСоединения() Экспорт
	 Возврат глТекТипСоединения;
КонецФункции


//___________________________________________________________________________________________
Процедура ПереименоватьТаблицу(Имя1,Имя2)Экспорт
	Если ТипСоединения()=ConnectionDBF Тогда
		УдалитьТаблицу(Имя2);
		ФС2=СоздатьОбъект("Файловая система");
		Фс2.ПереименоватьФайл(Имя1+".dbf",Имя2+".dbf");
	ИначеЕсли ТипСоединения()=ConnectionSQLLite Тогда
	
		//создаем новую таблицу с таким же определением данных
		Имя1=ВРег(Сокрлп(Имя1));
		Запрос("select SQL from SQLITE_MASTER where type='table' and name like '"+Имя1+"'");
		Рез=ПолучитьСтроку();
		Если Рез=0 Тогда
			Ошибка("Таблицы с именем '"+Имя1+"' не существует");
		КонецЕсли
		СтрСоздания=ВРег(Сокрлп(ПолучитьПоле(1)));
		Рез=Найти(СтрСоздания," "+Имя1);
		Если Рез=0 Тогда
			Сообщить("СтрСоздания="+СтрСоздания);
			Ошибка("Не могу удалить имя таблицы...");//ошибка алгоритма...
		КонецЕсли
		СтрСоздания=Лев(СтрСоздания,Рез)+Имя2+Сред(СтрСоздания,Рез+СтрДлина(Имя1)+1);

		//чоздаем новую таблицу (но вначале удаляем таблицу с таким имеем)
		УдалитьТаблицу(Имя2);
		Запрос(СтрСоздания);

		//Перекачиваем туда все данные		
		Запрос("INSERT INTO "+Имя2+" SELECT * FROM "+Имя1);

		//удаляем старую таблицу
		УдалитьТаблицу(Имя1);
	Иначе//MySQL
		УдалитьТаблицу(Имя2);
		Запрос("ALTER TABLE "+Имя1+" RENAME "+Имя2);
	КонецЕсли
КонецПроцедуры

//___________________________________________________________________________________________
Процедура УдалитьТаблицу(Имя)Экспорт
	Если Сокрлп(Имя)<>"" Тогда
		Если СуществуетТаблица(Имя)=1 Тогда
			Если ТипСоединения()=ConnectionDBF Тогда
				ФС2=СоздатьОбъект("Файловая система");
				Фс2.УдалитьФайл(Имя+".dbf");
			Иначе
				Запрос("DROP TABLE "+Имя);
			КонецЕсли
		КонецЕсли
	КонецЕсли
КонецПроцедуры

//___________________________________________________________________________________________
//Функция ПолучитьБД()Экспорт
//	 Возврат БД;
//КонецФункции//ПолучитьБД


//___________________________________________________________________________________________
#Если server
Функция ВернутьРезультатЗапроса(Текст)Экспорт
	Перем ТекущийРезультат;
	Рез=0;
	ТекущийРезультат=СоздатьОбъект("Структура");
	ТекущийРезультат.ВсеЗначения=СоздатьОбъект("Массив");
	//ТекущийРезультат.Ошибка="";
	Попытка
		Рез=БД.Запрос(Текст);
	Исключение//ошибка будет ссылаться на строку, из которой произошел вызов метода объекта
		//ТекущийРезультат.Ошибка=ОписаниеОшибки();
		Возврат ОписаниеОшибки();
	КонецПопытки
	Если Рез=1 Тогда
		ТекущийРезультат.ВсеЗначения=БД.ПолучитьВсеЗначения();//массив структур
		ТекущийРезультат.ИменаПолей=БД.ПолучитьИменаПолей();//массив
	КонецЕсли
	Возврат ТекущийРезультат;		 
КонецФункции//ВернутьРезультатЗапроса
#КонецЕсли	
