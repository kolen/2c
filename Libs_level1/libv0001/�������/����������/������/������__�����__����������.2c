Перем КонтекстФормы;//форма элемента, группы, списка
Перем КонтекстМодуля;//модуль формы, группы и т.п. (для справочников совпадает со значением КонтекстФормы)
Перем Группа;//Признак группы
Перем Вид;
Перем Запрос;
Перем ДиалоговыйЭлемент;
Перем ВидыДляВыбора;
Перем НеИзменятьВид;
Перем ИзменяемыйВидВДиалоге;

//поддержка выбора значения
//Перем ПредЗначение;
Перем ФормаДиалоговогоЭлемента;//форма, на которой лежат диалоговые элементы данного типа
Перем ИдентификаторДиалоговогоЭлемента;
Перем КонтекстФормыПодбора;

Перем ОбъектЗаблокирован;
//Перем ОбъектЗаблокированНами;

Перем ПодчиненныеСправочники[];//Буфер ранее уже созданных справочников для случая когда мы работем с общих справочником (без позиционирования на нужный вид)
//ПодчиненныеСправочники:Массив

Перем ПрефиксНомераОбъекта;

//МАКРОСЫ
#Задать	ПРОВЕРКА_ВИДА_СПРАВОЧНИКА	Если ПустоеЗначение(Вид)=1 Тогда Ошибка("Не задан вид"); КонецЕсли
#Задать	МасВидовТекОбъекта			СоздатьОбъект("Метаданные").Массив["Метаданные"][ПолучитьТипОбъекта()]

/////////////////////////////////////////////////////////////////////////////////////////////
//Предопределенные процедуры и функции объекта
/////////////////////////////////////////////////////////////////////////////////////////////

//___________________________________________________________________________________________
//Динамическое получение атрибутов
Функция ПолучитьАтрибут(Имя) Экспорт
	//смотрим может конкретный вид регистра не выбран - работаем с набором регистров
	Если ПустоеЗначение(Вид)=1 Тогда
		ПроверитьВид(Имя);
		Если ПодчиненныеСправочники.НайтиИдентификатор(Имя) Тогда
			Возврат ПодчиненныеСправочники[Имя];
		КонецЕсли
		Объект=СоздатьОбъект(ПолучитьТипОбъекта()+"."+Имя);
		ПодчиненныеСправочники[Имя]=Объект;
		Возврат Объект;
	КонецЕсли
	
	Возврат БазовыйОбъект.ПолучитьАтрибут(Имя);
КонецФункции

//___________________________________________________________________________________________
//Динамическое задание атрибутов
Процедура УстановитьАтрибут(Имя,Значение) Экспорт
	ПРОВЕРКА_ВИДА_СПРАВОЧНИКА
	
	БазовыйОбъект.УстановитьАтрибут(Имя,Значение);
КонецПроцедуры

//___________________________________________________________________________________________
Функция ПолучитьИмяАтрибута(Номер)Экспорт
	//смотрим может конкретный вид не выбран - работаем с набором справочников
	Если ПустоеЗначение(Вид)=1 Тогда
		Возврат МасВидовТекОбъекта.ИдентификаторПоНомеру(Номер);
	КонецЕсли
	
	//работаем с набором атрибутов конкретного вида
	Возврат БазовыйОбъект.ПолучитьИмяАтрибута(Номер);
КонецФункции
//___________________________________________________________________________________________
Функция ПолучитьКоличествоАтрибутов()Экспорт
	//смотрим может конкретный вид не выбран - работаем с набором справочников
	Если ПустоеЗначение(Вид)=1 Тогда
		Возврат РазмерСтруктуры(МасВидовТекОбъекта);
	КонецЕсли
	
	//работаем с набором атрибутов конкретного вида
	Возврат БазовыйОбъект.ПолучитьКоличествоАтрибутов();
КонецФункции

//___________________________________________________________________________________________
Функция ПолучитьПредставлениеОбъекта()Виртуально Экспорт
	Если СокрЛП(Вид)="" Тогда
		Возврат "";
	КонецЕсли
	
	Если Число(ПолучитьИдентификаторОбъекта())<>0 ИЛИ Выбран()=1 ИЛИ  ЭтоНовый()=1 Тогда
		Возврат БазовыйОбъект.ПолучитьАтрибут("Наименование");
	Иначе
		Возврат "";
	КонецЕсли
КонецФункции

//___________________________________________________________________________________________
//Вызывается при открытии любой подчиненной формы
Процедура ОбработкаОткрытияФормы(Конт) Экспорт
	
	КонтекстФормы=Конт;
	КонтекстМодуля=Конт;
	УстановитьПеременныеКонтекста(КонтекстМодуля);
	
	Заголовок=ПолучитьПредставлениеОбъекта();
	Если ПустоеЗначение(Заголовок)=0 Тогда
		Конт.Форма.Заголовок(ПолучитьПредставлениеОбъекта());
	КонецЕсли
	//КонтекстФормы.Форма.ИдентификаторВосстановления(ПолучитьТипОбъекта()+"."+Вид());
	
	БазовыйОбъект.ОбработкаОткрытияФормы(Конт);
КонецПроцедуры

//___________________________________________________________________________________________
//Вызывается при закрытии любой подчиненной формы
Процедура ОбработкаЗакрытияФормы(Конт,НомерВызова) Экспорт
	Если НомерВызова=2 Тогда
		КонтекстФормы=Конт;
		КонтекстМодуля=Конт;
		Если Конт.Форма.Модифицированность()=1 Тогда
			Рез=Вопрос("Объект не записан. Записать?","Да+Нет+Отмена");
			Если Рез="Да" Тогда
				Попытка
					Записать();
				Исключение
					Сообщить(ОписаниеОшибки());
					СтатусВозврата(0);
				КонецПопытки
			ИначеЕсли Рез<>"Нет" Тогда
				СтатусВозврата(0);
			КонецЕсли
		КонецЕсли
		Если СтатусВозврата()=0 Тогда
			Возврат;
		КонецЕсли
		КонтекстФормы=0;
		КонтекстМодуля=0;
	КонецЕсли
	БазовыйОбъект.ОбработкаЗакрытияФормы(Конт,НомерВызова);
	
	Если Выбран() Тогда
		Блокировка(0);
	КонецЕсли
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////////
//Конструктор, деструктор
/////////////////////////////////////////////////////////////////////////////////////////////



//___________________________________________________________________________________________
Процедура Конструктор(ВидОбъекта,Параметр)
	КонтекстФормы=0;
	КонтекстМодуля=0;
	Вид=ВидОбъекта;
	Выбран=0;
	Новый=0;
	ID=0;
	Открыт=0;
	НеИзменятьВид=0;
	
	Если Сокрлп(Вид)<>"" Тогда
		ТипВид=ПолучитьТипОбъекта()+"."+Вид;
		Инициализация(ТипВид);
		ПрефиксНомераОбъекта=ПрефиксыНомеровОбъектов()[ТипВид];
	КонецЕсли
	Если ТипЗначения(Параметр)=100 Тогда//визуальный элемент формы
		ДиалоговыйЭлемент=Параметр;
		ДиалоговыйЭлемент.Редактирование(0);
	КонецЕсли;
КонецПроцедуры
//___________________________________________________________________________________________
Процедура Деструктор()
	КонтекстФормы=0;
	КонтекстМодуля=0;
	Если ОбъектЗаблокирован Тогда
		ИДОбъекта=ПолучитьИдентификаторОбъекта();
		Если ИДОбъекта>0 Тогда
			Результат=ВызватьСобытие("РазблокироватьОбъект",ИДОбъекта);
		КонецЕсли
	КонецЕсли
КонецПроцедуры//Деструктор

////___________________________________________________________________________________________
//Функция Тип()Экспорт Виртуально
//	 Возврат ТипОбъекта;
//КонецФункции//ТипОбъекта

//___________________________________________________________________________________________
//Строковое значение типа объекта
Функция ПолучитьТипОбъекта()Экспорт Виртуально
	Возврат ТипОбъекта();
КонецФункции


//___________________________________________________________________________________________
//Обрабочик событий визуального объекта
//Возвращает:
//0 - событие не обработано (передается в форму для дальнейшей обработки)
//1 - событие обработано (далее в форму не передается)
Функция ОбработкаСобытия(ИмяСобытия) Экспорт//ИмяСобытия - имя события как оно задано в окне свойств конфигуратора
	Если ИмяСобытия="Выбор" Тогда
		Если СостояниеКлавиши("SHIFT") ИЛИ СостояниеКлавиши("DELETE") Тогда//очистка значения
			УстановитьЗначение("");
		Иначе
			Если ТипЗначения(ФормаДиалоговогоЭлемента)=0 Тогда
				Выбрать(0);//модальный диалог, т.к. неизвестен диалоговый объект для обновления данных
				Возврат 0;
			Иначе
				Выбрать(1);
				Возврат 1;
			КонецЕсли
		КонецЕсли
	КонецЕсли;
	Возврат 0;
КонецФункции

//___________________________________________________________________________________________
//Вызывается при попытке присвоить значение диалоговому элементу или запрещенной для записи переменной
Процедура УстановитьЗначение(Значение) Экспорт
	Если ТипЗначенияСтр(Значение)=ПолучитьТипОбъекта() Тогда
		Вид=Значение.Вид();
		Если Сокрлп(Вид)<>"" Тогда
			Инициализация(ПолучитьТипОбъекта()+"."+Вид);
			УстановитьИдентификаторОбъекта(Значение.ПолучитьИдентификаторОбъекта());
			Если ТипЗначения(ДиалоговыйЭлемент)<>0 Тогда
				ДиалоговыйЭлемент.Заголовок(Значение);
			КонецЕсли
			Возврат;
		КонецЕсли
	КонецЕсли;
	УстановитьИдентификаторОбъекта(0);
КонецПроцедуры




/////////////////////////////////////////////////////////////////////////////////////////////
//Служебные процедуры и функции
/////////////////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////////////////////////
//Методы объекта 
/////////////////////////////////////////////////////////////////////////////////////////////

////___________________________________________________________________________________________
//Процедура Новый() Экспорт
//	БазовыйОбъект.Новый();
//КонецПроцедуры
//


//___________________________________________________________________________________________
Функция ТекущийЭлемент() Экспорт
	Если Выбран()=0 Тогда
		Возврат Контекст;
	КонецЕсли
	
	НовОбъект=СоздатьОбъект(ПолучитьТипОбъекта()+"."+Вид);
	НовОбъект.НайтиЭлемент(Контекст);
	Возврат НовОбъект;
КонецФункции



//___________________________________________________________________________________________
Функция Вид() Экспорт
	Возврат Вид;
КонецФункции

//___________________________________________________________________________________________
//Доделать!!!
Функция ПредставлениеВида()Экспорт
	Возврат Вид();
КонецФункции//ПредставлениеВида

//___________________________________________________________________________________________
Функция Блокировка(Флаг)Экспорт
	Перем ИДОбъекта;
	ИДОбъекта=ПолучитьИдентификаторОбъекта();
	//	ОбъектЗаблокирован=Число(ВызватьСобытие("ПроверитьБлокировку",ИДОбъекта));
	//	Если ТипЗначения(Флаг) Тогда//если передано значение
	//		Если ОбъектЗаблокирован Тогда
	//			Если НЕ ОбъектЗаблокированНами Тогда
	//				Ошибка("Объект заблокирован");
	//			КонецЕсли
	//		КонецЕсли
	//		Если Флаг Тогда
	//			ВызватьСобытие("ЗаблокироватьОбъект",ИДОбъекта);
	//			ОбъектЗаблокированНами=1;
	//		Иначе
	//			ВызватьСобытие("РазблокироватьОбъект",ИДОбъекта);
	//			ОбъектЗаблокированНами=0;
	//		КонецЕсли
	//	КонецЕсли
	Если Флаг Тогда
		Результат=ВызватьСобытие("ЗаблокироватьОбъект",ИДОбъекта);
		ОбъектЗаблокирован=Результат;
	Иначе
		Результат=ВызватьСобытие("РазблокироватьОбъект",ИДОбъекта);
	КонецЕсли
	Возврат Результат;
КонецФункции//Блокировка


//___________________________________________________________________________________________
//Открытие стандартной формы редактирования объекта
Функция ОткрытьФормуОбъекта(Парам,Родитель,ФлагГруппы,Владелец,КонтекстОткрытия,РежимПодбора,ЗначениеПодбора) Экспорт
	Если Вид="" Тогда//значит объект не задан
		Возврат 0;
	КонецЕсли
	
	Если Выбран() Тогда
		ТекИД=ПолучитьТипОбъекта()+"."+Вид+"."+ПолучитьИдентификаторОбъекта();
		УспешныйРезультат=Блокировка(1);
		Если НЕ УспешныйРезультат Тогда
			Предупреждение("Объект заблокирован!");
			СтатусВозврата(0);
			Возврат 0;
		КонецЕсли
	Иначе//новый
		Новый();
		
		//УстановитьАтрибут("Наименование","Наименование1");
		
		//гарантия открытия одной формы для нового элемента
		ТекИД="Новый."+ПолучитьТипОбъекта()+"."+Вид+"."+ПолучитьНомерОбъекта(ПолучитьТипОбъекта()+"."+Вид);
		
		//тип формы (группа или элемент)
		Если ТипЗначения(ФлагГруппы)=1 Тогда
			УстановитьАтрибут("#ЭтоГруппа",Число(ФлагГруппы));
		КонецЕсли
	КонецЕсли
	
	Если ЭтоГруппа() Тогда
		ИмяФормы="Форма группы";
	Иначе
		ИмяФормы="Форма диалога";
	КонецЕсли
	
	ИмяФормы=ПолучитьИмяФормы(ИмяФормы,"Пустая форма диалога");
	
	Результат=0;
	Если ЭтоГруппа() Тогда
		Если Выбран()=0 Тогда
			ТекИД=-ТекИД;//новая группа может открываться одновременно с новым элементом...
		КонецЕсли
	КонецЕсли
	
	Перем ТекКонт;
	Результат=ОткрытьФорму(ИмяФормы,ТекКонт,,ТекИД,,КонтекстОткрытия,РежимПодбора,ЗначениеПодбора);
	Если Выбран()=0 Тогда
		Попытка
			ТекКонт.ВводНового(0);
		Исключение
			Попытка
				ТекКонт.InputNew(0);
			Исключение
			КонецПопытки
		КонецПопытки
	КонецЕсли
	Возврат Результат;
КонецФункции

Функция Выбрать(НемодальноеОткрытие=0) Экспорт//Вызов диалога для выбора элемента справочника
	
	Если ТолькоЧтение()=1 Тогда
		Ошибка("Объект доступен только на чтение");
	КонецЕсли
	
	Если НеИзменятьВид=0 И ИзменяемыйВидВДиалоге Тогда
		Вид="";
	КонецЕсли
	
	Если ПустоеЗначение(Вид)=1 Тогда
		ИзменяемыйВидВДиалоге=1;
		Список=СоздатьОбъект("СписокЗначений");
		Мета=СоздатьОбъект("Метаданные").Массив.Метаданные[ПолучитьТипОбъекта()];
		ТекВидыДляВыбора=","+ВРЕГ(ВидыДляВыбора)+",";
		Для А=1 По РазмерСтруктуры(Мета) Цикл
			Имя=Мета.ИдентификаторПоНомеру(А);
			Если ПустоеЗначение(ВидыДляВыбора)=0 Тогда
				Если Найти(ТекВидыДляВыбора,","+ВРЕГ(Имя),",")<>0 Тогда
					Список.ДобавитьЗначение(Имя);
				КонецЕсли
			Иначе
				Список.ДобавитьЗначение(Имя);
			КонецЕсли
		КонецЦикла;
		
		Если Список.РазмерСписка()=1 Тогда
			Вид=Список.ПолучитьЗначение(1);
		Иначе
			Рез=Список.ВыбратьЗначение(Вид,"Выберите вид",1,0);
			Если Рез<>1 Тогда
				Вид="";
				Возврат 0;
			КонецЕсли;
		КонецЕсли
		НазначитьВид(Вид);
	КонецЕсли;
	
	СтрИмяСписка=ПолучитьИмяФормы("Список элементов","ФормаСписка");
	
	Если НемодальноеОткрытие Тогда
		Рез=ОткрытьПодбор(СтрИмяСписка,"",КонтекстФормыПодбора,0,Контекст);
	Иначе
		Рез=ОткрытьФормуМодально(СтрИмяСписка,КонтекстФормыПодбора,,"Список:"+ИдентификаторДиалоговогоЭлемента,,Контекст,1,Контекст);
	КонецЕсли
	
	Возврат Рез;
КонецФункции

//___________________________________________________________________________________________
Процедура ОбработкаПодбора(Значение,Конт)Экспорт
	Флаг=1;
	Если ТипЗначения(ФормаДиалоговогоЭлемента)=100 Тогда
		Попытка
			ФормаДиалоговогоЭлемента.ОбработкаВыбораЗначения(Значение,ИдентификаторДиалоговогоЭлемента,Флаг);
		Исключение
		КонецПопытки
		Попытка
			ФормаДиалоговогоЭлемента.ProcessValueChoice(Значение,ИдентификаторДиалоговогоЭлемента,Флаг);
		Исключение
		КонецПопытки
	КонецЕсли
	Если Флаг Тогда
		УстановитьЗначение(Значение);
	КонецЕсли
КонецПроцедуры//ОбработкаПодбора

//___________________________________________________________________________________________
Функция ПолучитьИмяФормы(СтрИмяСписка,СтрИмяПоДефолту)Экспорт
	Результат="MD:\Метаданные\"+ПолучитьТипОбъекта()+"\"+Вид+"\"+СтрИмяСписка;
	
	Если НЕ ЕстьФорма(СтрИмяСписка) Тогда
		Результат="MD:\Метаданные\"+ПолучитьТипОбъекта()+"\"+Вид+"\"+СтрИмяСписка;
		
		
		//копируем данные новой формы в файл конфигурации
		Мета=СоздатьОбъект("ФайлМетаданных"); 
		
		СтрТекст=Мета.ПрочитатьТекст("MD:\Объекты\"+ПолучитьТипОбъекта()+"\Формы\"+СтрИмяПоДефолту);
		Мета.ЗаписатьТекст(Результат,СтрТекст);
		
		СтрТекст=Мета.ПрочитатьТекст("MD:\Объекты\"+ПолучитьТипОбъекта()+"\Формы\"+СтрИмяПоДефолту+".frm");
		Мета.ЗаписатьТекст(Результат+".frm",СтрТекст);
	КонецЕсли
	
	Возврат Результат;
КонецФункции//ПолучитьИмяФормы

Функция ОткрытьСписок() Экспорт
	ИДСписка="Список."+ПолучитьТипОбъекта()+"."+Вид+"."+НомерТаблицыОбъекта();
	СтрИмяСписка=ПолучитьИмяФормы("Список элементов","ФормаСписка");
	Перем Конт;
	Рез=ОткрытьФорму(СтрИмяСписка,Конт,,"Список:"+ИДСписка);
	//Конт.Форма.ИдентификаторВосстановления("Список:"+ПолучитьТипОбъекта()+"."+Вид());
	Возврат Рез;
КонецФункции
//___________________________________________________________________________________________

//___________________________________________________________________________________________
//проверяет наличие формы в файле конфигурации (определение происходит по наличию файла формы с расширением "frm")
Функция ЕстьФорма(Имя)
	Мета=СоздатьОбъект("ФайлМетаданных"); 
	Возврат НЕ ПустоеЗначение(Мета.ПрочитатьТекст(ПолучитьТипОбъекта()+"/"+Вид+"/"+Имя+".frm"));
КонецФункции//ЕстьФорма

//___________________________________________________________________________________________
Процедура Закрыть() Экспорт
	Если ТипЗначения(КонтекстФормы)=100 Тогда
		КонтекстФормы.Форма.Закрыть();
	Иначе
		Ошибка("Метод ""Закрыть"" доступен только в режиме редактирования формы");
	КонецЕсли;
КонецПроцедуры

//___________________________________________________________________________________________
//Запись нового или отредактированного объекта (строки таблицы)
Перем ИдетИнтерактивнаяЗапись;//признак первого входа в процедуру Записать
Перем БылПользовательскийВызовЗаписать;
Функция Записать(ЗапретВызоваПредопределеннойПроцедуры="")Экспорт Виртуально//Записать() - запись элемента в базу данных
	//обработка случая когда интерактивно записывается форма объекта
	
	Если ПустоеЗначение(ЗапретВызоваПредопределеннойПроцедуры)=1 Тогда
		Если ИдетИнтерактивнаяЗапись<>1 Тогда
			Если ТипЗначения(КонтекстФормы)=100 Тогда
				
				СтатусВозврата(1);
				ИдетИнтерактивнаяЗапись=1;
				БылПользовательскийВызовЗаписать=0;
				
				Попытка
					КонтекстФормы.ПриЗаписи("");
				Исключение
					Попытка
						КонтекстФормы.OnWrite("");
					Исключение
					КонецПопытки
				КонецПопытки
				ИдетИнтерактивнаяЗапись=0;
				Если СтатусВозврата()=0 Тогда
					Возврат 0;//отмена записи
				КонецЕсли
				
				Если БылПользовательскийВызовЗаписать=1 Тогда
					Возврат 0;
				КонецЕсли
			КонецЕсли;
		КонецЕсли
	КонецЕсли
	
	//далее по обычной схеме
	БылПользовательскийВызовЗаписать=1;
	
	УстановитьАтрибутыИзКонтекста(КонтекстМодуля);
	
	Если ТипЗначения(КонтекстФормы)=100 Тогда
		КонтекстФормы.Форма.Модифицированность(0);
	КонецЕсли
	//Сообщить("Записать!!!!");
	Возврат БазовыйОбъект.Записать();
КонецФункции


//___________________________________________________________________________________________
Функция НазначитьВид(ВидОбъекта)Экспорт
	Если Сокрлп(ВидОбъекта)="" Тогда
		Ошибка("Не задан вид");
	КонецЕсли
	Вид=ВидОбъекта;
	Инициализация(ПолучитьТипОбъекта()+"."+Вид);
КонецФункции

//___________________________________________________________________________________________
Функция ПолучитьКартинкуЭлемента()Экспорт
	Если ПометкаУдаления()=0 Тогда
		Если ЭтоГруппа()=1 Тогда
			Возврат 170;
		Иначе
			Возврат 172;
		КонецЕсли
	Иначе
		Если ЭтоГруппа()=1 Тогда
			Возврат 605;
		Иначе
			Возврат 607;
		КонецЕсли
	КонецЕсли
КонецФункции//ПолучитьКартинкуЭлемента

//___________________________________________________________________________________________
Функция ЭтоГруппа()Экспорт
	Возврат Число(ПолучитьАтрибут("#ЭтоГруппа"));
КонецФункции//ЭтоГруппа


//___________________________________________________________________________________________
Процедура УстановитьНовыйКод(Префикс)Экспорт Виртуально//УстановитьНовыйКод(Префикс) - Установить новый код элемента справочника с заданным префиксом
	//	Перем НумераторОбъекта;
	//	НумераторОбъекта=СоздатьОбъект("Нумератор");
	//	Код=НумераторОбъекта.ПолучитьНовыйНомер(ПолучитьТипОбъекта()+"."+Вид(),Префикс);
	//	УстановитьАтрибут("Код",Код);
	//	Возврат;
	
	Запрос=СоздатьОбъект("Запрос");
	Текст="Код=Справочник."+Вид()+".Код; Функция Макс=Максимум(Код);";
	Запрос.Выполнить(Текст);
	
	Перем Номер=0;
	Если Запрос.ВыбратьСтроки()=1 Тогда
		Если Запрос.ПолучитьСтроку()=1 Тогда
			Номер=Запрос.Макс;
		КонецЕсли
	КонецЕсли
	
	Код=глПолучитьСледующийНомер(Номер);
	УстановитьАтрибут("Код",Код);
КонецПроцедуры//УстановитьНовыйКод

//___________________________________________________________________________________________
Функция ПрефиксКода(Префикс)Экспорт//ПрефиксКода(Префикс) - Установить/получить текущий префикс кода для справочника
	Результат=ПрефиксНомераОбъекта;
	Если ТипЗначения(Префикс)<>0 Тогда
		ПрефиксНомераОбъекта=Префикс;
	КонецЕсли
	
	Возврат Результат;
КонецФункции//ПрефиксКода

Процедура НоваяГруппа()Экспорт
	БазовыйОбъект.Новый();
	УстановитьАтрибут("#ЭтоГруппа",1);
	УстановитьНовыйКод(ПрефиксНомераОбъекта);
КонецПроцедуры//НоваяГруппа()

Функция Новый()Экспорт
	Рез=БазовыйОбъект.Новый();
	УстановитьНовыйКод(ПрефиксНомераОбъекта);
	Возврат Рез;
КонецФункции//НоваяГруппа()



//управление диалоговым элементом
//___________________________________________________________________________________________
Функция Видимость(Парам)Экспорт
	Возврат ДиалоговыйЭлемент.Видимость(Парам);
КонецФункции
//___________________________________________________________________________________________
Функция Доступность(Парам)Экспорт
	Возврат ДиалоговыйЭлемент.Доступность(Парам);
КонецФункции
//___________________________________________________________________________________________
Функция Заголовок(Парам)Экспорт
	Возврат ДиалоговыйЭлемент.Заголовок(Парам);
КонецФункции
//___________________________________________________________________________________________
Функция Редактирование(Парам)Экспорт
	Возврат ДиалоговыйЭлемент.Редактирование(Парам);
КонецФункции
//___________________________________________________________________________________________
Функция Маска(Парам)Экспорт
	Возврат ДиалоговыйЭлемент.Маска(Парам);
КонецФункции
//___________________________________________________________________________________________
Функция Модифицированность(Парам)Экспорт
	Возврат ДиалоговыйЭлемент.Модифицированность(Парам);
КонецФункции
//___________________________________________________________________________________________
Функция Активизировать(Парам)Экспорт
	Возврат ДиалоговыйЭлемент.Активизировать(Парам);
КонецФункции


//___________________________________________________________________________________________
Функция НайтиПоРеквизиту(ИмяРеквизита,Значение,ФлагГлобальногоПоиска=1)Экспорт//НайтиПоРеквизиту(<ИмяРеквизита>,<Значение>,<ФлагГлобальногоПоиска=1>)
	Если ТипЗначения(ФлагГлобальногоПоиска)=0 Тогда//по умолчанию
		ФлагГлобальногоПоиска=1;
	КонецЕсли
	
	Если ФлагГлобальногоПоиска=0 Тогда
		ОчиститьУсловия();
	КонецЕсли
	ЗадатьУсловие(ИмяРеквизита,Значение);
	Рез=ВыбратьЭлементыБД(0,1);
	Если Рез=0 Тогда
		Возврат 0;
	КонецЕсли
	Возврат ПолучитьЭлемент();
КонецФункции//НайтиПоРеквизиту

//___________________________________________________________________________________________
Функция НайтиПоКоду(Код,ФлагПоиска=0)Экспорт//НайтиПоКоду(<Код>,<ФлагПоиска=0>)
	Если ТипЗначения(ФлагПоиска)=0 Тогда//по умолчанию
		ФлагПоиска=1;
	КонецЕсли
	
	Возврат НайтиПоРеквизиту("Код",Код,1-ФлагПоиска);
КонецФункции//НайтиПоКоду

//___________________________________________________________________________________________
Функция НайтиПоНаименованию(Наименование,Режим=1,ФлагПоиска=0)Экспорт//НайтиПоНаименованию(<Наименование>,<Режим>,<ФлагПоиска>)
	Если ТипЗначения(Режим)=0 Тогда//по умолчанию
		Режим=1;
	КонецЕсли
	
	Возврат НайтиПоРеквизиту("Наименование",Наименование,1-Режим);
КонецФункции//НайтиПоНаименованию


//___________________________________________________________________________________________
Функция ВидыДляВыбора(УстВидыДляВыбора)Экспорт//ВидыДляВыбора(УстВидыДляВыбора) - Установка выбираемых видов для справочника неопределенного вида
	Перем Результат;
	
	Результат=ВидыДляВыбора;
	ВидыДляВыбора=УстВидыДляВыбора;
	
	НеИзменятьВид(0);
	
	Возврат Результат;
КонецФункции//ВидыДляВыбора

//___________________________________________________________________________________________
Функция НеИзменятьВид(УстФлаг)Экспорт//НеИзменятьВид(УстФлаг) - Позволяет запретить пользователю изменять вид при выборе значения
	Перем Результат;
	
	Результат=НеИзменятьВид;
	НеИзменятьВид=УстФлаг;
	
	Возврат Результат;
КонецФункции//НеИзменятьВид



//___________________________________________________________________________________________
//Доделать!!!
Функция ПолноеНаименование()Экспорт
	ПолучитьАтрибут("Наименование");
КонецФункции//ПолноеНаименование

//___________________________________________________________________________________________
Функция ВыбратьЭлементы(РежимИерархии=0)Экспорт//Открыть выборку элементов справочника. Возвращает: 1 - если в выборке есть хотя бы один элемент
	Возврат ВыбратьЭлементыБД(0,0);
КонецФункции//ВыбратьЭлементы

//___________________________________________________________________________________________
Функция ВыбратьЭлементыПоРеквизиту(ИмяРеквизита,Значение,РежимИерархии=0)Экспорт//ВыбратьЭлементыПоРеквизиту(<ИмяРеквизита>,<Значение>,<РежимИерархии>,<РежимГрупп>)
	//УсловиеСбросить();
	ЗадатьУсловие(ИмяРеквизита,Значение);
	Рез=ВыбратьЭлементыБД(0,0);
	СброситьУсловие(ИмяРеквизита);
	Возврат Рез;
КонецФункции//ВыбратьЭлементыПоРеквизиту

//___________________________________________________________________________________________
//Предопределенная процедура первичной инициализации диалоговых элементов на форме
Процедура ИнициализацияОбъекта(Конт,Идентификатор)Экспорт
	ФормаДиалоговогоЭлемента=Конт;
	ИдентификаторДиалоговогоЭлемента=Идентификатор;
КонецПроцедуры//ИнициализацияОбъекта

//___________________________________________________________________________________________
//Предопределенная процедура удаления визуального объекта с формы
Процедура ДеИнициализацияОбъекта()Экспорт
	Если ТипЗначения(КонтекстФормыПодбора)=100 Тогда
		КонтекстФормыПодбора.Форма.Закрыть();
	КонецЕсли
КонецПроцедуры//ДеИнициализацияОбъекта


//___________________________________________________________________________________________
Процедура ПроверитьВид(ИмяВида)
	Если МасВидовТекОбъекта.НайтиИдентификатор(ИмяВида)=0 Тогда
		Ошибка("Требуемый вид объекта не найден ("+ИмяВида+")");
	КонецЕсли
КонецПроцедуры//ПроверитьВид

//___________________________________________________________________________________________
//БД - > Переменные модуля
Процедура УстановитьПеременныеКонтекста(Конт)Экспорт
	Для А=1 По БазовыйОбъект.ПолучитьКоличествоАтрибутов() Цикл
		Имя=БазовыйОбъект.ПолучитьИмяАтрибута(А);
		Если Лев(Имя,1)="#" Тогда
			Продолжить;
		КонецЕсли

		Значение=БазовыйОбъект.ПолучитьАтрибут(Имя);
		Если ПустоеЗначение(Значение)=1 Тогда
			Значение="";
		КонецЕсли
		Конт.Перем("#"+Имя,Значение);
	КонецЦикла;
КонецПроцедуры//УстановитьПеременныеКонтекста

//___________________________________________________________________________________________
//Переменные модуля -> БД
Процедура УстановитьАтрибутыИзКонтекста(Конт)Экспорт
	Если ТипЗначения(Конт)=100 Тогда
		Для А=1 По БазовыйОбъект.ПолучитьКоличествоАтрибутов() Цикл
			Имя=БазовыйОбъект.ПолучитьИмяАтрибута(А);
			Если Лев(Имя,1)="#" Тогда
				Продолжить;
			КонецЕсли
			Значение=Конт.Перем("#"+Имя)
			БазовыйОбъект.УстановитьАтрибут(Имя,Значение);
		КонецЦикла;
	КонецЕсли
КонецПроцедуры//УстановитьАтрибутыИзКонтекста

//___________________________________________________________________________________________
Процедура УстановитьКонтекстМодуля(Конт)Экспорт
	КонтекстМодуля=Конт;
КонецПроцедуры//УстановитьКонтекстМодуля
