Перем КонтекстФормы;//форма диалога, списка...
Перем КонтекстМодуля;//модуль формы, списка и т.п. (для справочников совпадает со значением КонтекстФормы)

Перем ТабличнаяЧасть;//табличная часть в памяти
Перем ТабличнаяЧастьБД;//в базе данных
//Перем ВремяДокумента;// Экспорт;


Перем ЕстьВизуальнаяТЗ;
Перем БылаВыборка;

Перем ПриЗаписиПерепроводить;

Перем НомерСтроки Экспорт;

/////////////////////////////////////////////////////////////////////////////////////////////
//Intelli-Sense:
//ТабличнаяЧасть:ТабличнаяЧасть
//ТабличнаяЧастьБД:ТаблицаБД
//Регистр:Регистр


/////////////////////////////////////////////////////////////////////////////////////////////
//Предопределенные процедуры и функции объекта
/////////////////////////////////////////////////////////////////////////////////////////////

//___________________________________________________________________________________________
//Динамическое получение атрибутов
Функция ПолучитьАтрибут(Имя) Экспорт
	Если ПустоеЗначение(Вид())=0 Тогда
		Если ТипЗначения(ТабличнаяЧасть)>1 Тогда
			//смотрим может это атрибут табличной части
			Если ТабличнаяЧасть.ПолучитьНомерАтрибута(Имя)>0 Тогда
				Возврат ТабличнаяЧасть.ПолучитьАтрибут(Имя);
			КонецЕсли
		КонецЕсли
	КонецЕсли
	Возврат БазовыйОбъект.ПолучитьАтрибут(Имя);
КонецФункции

//___________________________________________________________________________________________
//Динамическое задание атрибутов
Процедура УстановитьАтрибут(Имя,Значение) Экспорт
	Если ПустоеЗначение(Вид())=1 Тогда
		Ошибка("Не задан вид");
	КонецЕсли
	
	Если ТипЗначения(ТабличнаяЧасть)>1 Тогда
		//смотрим может это атрибут табличной части
		Если ТабличнаяЧасть.ПолучитьНомерАтрибута(Имя)>0 Тогда
			ТабличнаяЧасть.УстановитьАтрибут(Имя,Значение);
		КонецЕсли
	КонецЕсли
	БазовыйОбъект.УстановитьАтрибут(Имя,Значение);
КонецПроцедуры

//___________________________________________________________________________________________
Функция ПолучитьПредставлениеОбъекта()Экспорт
	Если СокрЛП(Вид())="" Тогда
		Возврат "";
	КонецЕсли
	
	Если Число(ПолучитьИдентификаторОбъекта())<>0 ИЛИ Выбран()=1 ИЛИ  ЭтоНовый()=1 Тогда
		Возврат Вид()+" № "+ПолучитьАтрибут("НомерДок")+" от "+ПолучитьАтрибут("ДатаДок");
	Иначе
		Возврат "";
	КонецЕсли
КонецФункции


//___________________________________________________________________________________________
//Вызывается при открытии любой подчиненной формы
Процедура ОбработкаОткрытияФормы(Конт)Экспорт 
	Время1=_GetPerformanceCounter();
	КонтекстФормы=Конт;
	КонтекстМодуля=Конт;
	
	Если СписокТЧ[Вид()]=1 Тогда
			ПредТабличнаяЧасть=ТабличнаяЧасть;
			ТабличнаяЧасть=КонтекстФормы.Перем("#ТабличнаяЧасть");
			Если ВРЕГ(ТипЗначенияСтр(ТабличнаяЧасть))<>"ТАБЛИЧНАЯЧАСТЬ" Тогда
				ЕстьВизуальнаяТЗ=0;
				ТабличнаяЧасть=СоздатьОбъект("ТаблицаЗначений");
				БазовыйОбъект.ОбработкаОткрытияФормы(Конт);
				Возврат;
			КонецЕсли
			
			ЕстьВизуальнаяТЗ=1;
			Если ТипЗначения(ПредТабличнаяЧасть)>1 Тогда
				//уже есть заполненная ТЗ - копируем ее на форму
				ЗагрузитьСтруктуруТабличнойЧасти();
				ПредТабличнаяЧасть.ВыбратьСтроки();
				Пока ПредТабличнаяЧасть.ПолучитьСтроку()=1 Цикл
					ТабличнаяЧасть.НоваяСтрока();
					Для Кол=1 По ПредТабличнаяЧасть.ПолучитьКоличествоАтрибутов() Цикл
						Имя=ПредТабличнаяЧасть.ПолучитьИмяАтрибута(Кол);
						ТабличнаяЧасть.УстановитьАтрибут(Имя,ПредТабличнаяЧасть.ПолучитьАтрибут(Имя));
					КонецЦикла
				КонецЦикла
				ПредТабличнаяЧасть=0;
			Иначе
				ЗагрузитьТабличнуюЧасть(); 
			КонецЕсли
			
			ТабличнаяЧасть.Обновить();
			ТабличнаяЧасть.Модифицированность(0);
			
			
			Время5=_GetPerformanceCounter();
			//Сообщить(Время2-Время1);
			//Сообщить(Время3-Время2);
			//Сообщить(Время5-Время3);
			//Сообщить(Время5-Время1);
//		Попытка
//		Исключение
//			ТабличнаяЧасть=СоздатьОбъект("ТаблицаЗначений");
//		КонецПопытки
	КонецЕсли
	БазовыйОбъект.ОбработкаОткрытияФормы(Конт);
КонецПроцедуры


//___________________________________________________________________________________________
//Вызывается при закрытии любой подчиненной формы
Процедура ОбработкаЗакрытияФормы(Конт,НомерВызова) Экспорт
	Если НомерВызова=2 Тогда
		Если ЕстьВизуальнаяТЗ=1 Тогда
			Если ТабличнаяЧасть.Модифицированность()=1 Тогда
				Конт.Форма.Модифицированность(1);
			КонецЕсли
		КонецЕсли
	КонецЕсли
	БазовыйОбъект.ОбработкаЗакрытияФормы(Конт,НомерВызова);
	Если НомерВызова=2 Тогда
		Если СтатусВозврата()=1 Тогда
			ТабличнаяЧасть=0;
			КонтекстФормы=0;
			КонтекстМодуля=0;
			ЕстьВизуальнаяТЗ=0;
			//Сообщить(Контекст.Контрагент);
		КонецЕсли
	КонецЕсли
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////////
//Методы объекта 
/////////////////////////////////////////////////////////////////////////////////////////////


//___________________________________________________________________________________________
//Строковое значение типа объекта
Функция ПолучитьТипОбъекта()Экспорт Виртуально
	Возврат ТипОбъекта();
КонецФункции

//___________________________________________________________________________________________
Функция ТекущийДокумент() Экспорт
	Возврат ТекущийЭлемент();
КонецФункции


//___________________________________________________________________________________________
Процедура Конструктор(ВидОбъекта,Параметр)Экспорт
	ТабличнаяЧастьБД=0;
	КонтекстФормы=0;
	КонтекстМодуля=0;
	ТабличнаяЧасть=0;
	ЕстьВизуальнаяТЗ=0;
	БылаВыборка=0;
	Если ПустоеЗначение(ВидОбъекта)=0 Тогда
		НазначитьВид(ВидОбъекта);
		УстановитьПолеАвтоУпорядочивания("ДатаДок","НомерДок");
	КонецЕсли
	//ТекущийДокумент=Контекст;
КонецПроцедуры

//___________________________________________________________________________________________
Процедура Деструктор()
	ТабличнаяЧастьБД=0;
	КонтекстФормы=0;
	ТабличнаяЧасть=0;
	КонтекстМодуля=0;
КонецПроцедуры//Деструктор


//___________________________________________________________________________________________
Функция ВыбратьДокументы(НачДата,КонДата)Экспорт
	Возврат ВыбратьЭлементыБД(0,0);
КонецФункции//ВыбратьДокументы

//___________________________________________________________________________________________
Функция ПолучитьДокумент()Экспорт
	Возврат ПолучитьЭлемент();
КонецФункции//ВыбратьДокументы

//
////___________________________________________________________________________________________
//Функция ПолучитьЭлемент()Экспорт//используется в списке объектов(объект ТаблицаБДСписок)
//	Рез=БазовыйОбъект.ПолучитьЭлемент();
//	Если Рез Тогда
//		ВремяДокумента=ПолучитьАтрибут("#ВремяДокумента");
//	КонецЕсли
//	Возврат Рез;
//КонецФункции//ПолучитьЭлемент
//

//___________________________________________________________________________________________
Перем ИдетПроведение;
Процедура Записать(ЗапретПроведения=0,ЗапретПредопрПроц=0) Экспорт
	
	//метод записать для открытого и проведенного документа неявно вызывает метод Провести
	Если ПриЗаписиПерепроводить И НЕ ЗапретПроведения И НЕ ИдетПроведение Тогда
		Если ТипЗначения(КонтекстФормы)=100 И Проведен()=1 Тогда
			Провести();
			Возврат;
		КонецЕсли
	КонецЕсли
	
	Если ПустоеЗначение(ПолучитьАтрибут("#ВремяДокумента")) Тогда//TODO: здесь надо сделать проверку на автовремя (конец или начала дня)
		ВремяДокумента=Число(СтрЗаменить(ТекущееВремя(),":"));
		УстановитьАтрибут("#ВремяДокумента",ВремяДокумента);
	КонецЕсли
	
	
	НачатьТранзакцию();
	
	//Запись шапки документа
	СтатусВозврата(1);
	БазовыйОбъект.Записать(ЗапретПредопрПроц);
	Если СтатусВозврата()=0 Тогда//была отмена в предопределенной процедуре ПриЗаписи
		//ОтменитьТранзакцию();
		//Ошибка("Документ не записан (отмена в предопределенной процедуре ПриЗаписи)");
		Возврат;
	КонецЕсли
	
	
	//Запись табличной части
	Если ТипЗначения(ТабличнаяЧастьБД)>5 Тогда
		ВыгрузитьТабличнуюЧасть();
	КонецЕсли
	
	Если ЕстьВизуальнаяТЗ=1 Тогда
		ТабличнаяЧасть.Модифицированность(0);
	КонецЕсли
	
	ЗафиксироватьТранзакцию();
КонецПроцедуры


//___________________________________________________________________________________________
Функция Провести(Парам1="") Экспорт
    ФлагЗапрета=ВызватьСобытие("ПередПроведением",ТекущийДокумент());
    Если ФлагЗапрета Тогда
    	Возврат 0;
    КонецЕсли
	Если ПометкаУдаления()=1 Тогда
		Ошибка("Документ помеченный на удаление не может быть проведен");
	КонецЕсли
	
	НачатьТранзакцию();
	ИдетПроведение=1;
	_КонтекстМодуля=КонтекстМодуля;
	Попытка
		СтатусВозврата(1);
		
		Если ТипЗначения(КонтекстФормы)=100 Тогда//проведение из визуальной формы документа
			Записать(1);
			Если СтатусВозврата()=0 Тогда//отмена в предопределенной процедуре формы ПриЗаписи
				Ошибка("Документ не проведен (отмена в предопределенной процедуре ПриЗаписи)");
			КонецЕсли
		КонецЕсли
		
		Результат=Провести2(Парам1);
		
		
		
	Исключение
		//выполняем восстановительные действия перед выдачей ошибки
		СтрОписания=ОписаниеОшибки();
		
		ИдетПроведение=0;
		КонтекстМодуля=_КонтекстМодуля;
		УстановитьКонтекстМодуля(КонтекстМодуля);
		//ОтменитьТранзакцию();
		
		Если ТипЗначения(КонтекстФормы)=100 Тогда//проведение из визуальной формы документа
			УстановитьПеременныеКонтекста(КонтекстМодуля);
			КонтекстФормы.Форма.Обновить(0,1);
		КонецЕсли
		Ошибка(СтрОписания);
	КонецПопытки
	ИдетПроведение=0;
	КонтекстМодуля=_КонтекстМодуля;
	УстановитьКонтекстМодуля(КонтекстМодуля);
	ЗафиксироватьТранзакцию();
	
	Если ТипЗначения(КонтекстФормы)=100 Тогда//проведение из визуальной формы документа
		УстановитьПеременныеКонтекста(КонтекстМодуля);
		КонтекстФормы.Форма.Модифицированность(0);
		КонтекстФормы.Форма.Обновить(0,1);
	КонецЕсли
	Возврат Результат;
КонецФункции//Провести


//___________________________________________________________________________________________
Функция Провести2(Парам1)
	//***********************************
	//Клиент-Сервер
	//***********************************
#ЕслиНе server
	Если КлиентБД<>0 Тогда//отправляем проведение документа на сервер
		Состояние("Запрос на сервер "+Контекст);
		Результат=Число(КомандаСерверуПриложений("ПРОВЕСТИ",Контекст))
		Если Результат Тогда
			ВызватьСобытие("ПослеПроведения",ТекущийДокумент());
		КонецЕсли
		Возврат Результат;
	КонецЕсли
#КонецЕсли	
	//***********************************
	
	
	Модуль=СоздатьОбъект("Модуль");
	Модуль.Загрузить("Метаданные\Документ\"+Вид()+"\Модуль проведения");
	Если Модуль.НайтиФункцию("ОбработкаПроведения")=1 Тогда
		
		КонтекстМодуля=Модуль.ПолучитьКонтекст();
		УстановитьПеременныеКонтекста(КонтекстМодуля);
		УдалитьДвижения();
		
		КонтекстМодуля.ОбработкаПроведения(Парам1);
		
		
		Если СтатусВозврата()=0 Тогда//была отмена в предопределенной процедуре
			Ошибка("Документ не проведен");
		КонецЕсли
		
		УстановитьАтрибутыИзКонтекста(КонтекстМодуля);
		
		УстановитьАтрибут("#IsDel",0);
		УстановитьАтрибут("#IsPosted",1);
		
		УстановитьКонтекстМодуля(0);
		Записать(1,1);
	    ВызватьСобытие("ПослеПроведения",ТекущийДокумент());		
		Возврат 1;
	Иначе
		Сообщить("Не найдена процедура ОбработкаПроведения");
		Возврат 0;
	КонецЕсли;
КонецФункции//Провести2
//___________________________________________________________________________________________
Функция СделатьНеПроведенным()Экспорт
	ФлагЗапрета=ВызватьСобытие("ПередОтменойПроведения",ТекущийДокумент());
    Если ФлагЗапрета Тогда
    	Возврат 0;
    КонецЕсли
	Модуль=СоздатьОбъект("Модуль");
	Модуль.Загрузить("Метаданные\Документ\"+Вид()+"\Модуль проведения");
	Если Модуль.НайтиФункцию("ОбработкаУдаленияПроведения")=1 Тогда
		СтатусВозврата(1);
		КонтекстМодуля=Модуль.ПолучитьКонтекст();
		УстановитьПеременныеКонтекста(КонтекстМодуля);
		УстановитьКонтекстМодуля(0);
		НачатьТранзакцию();
		Попытка
			ТабличнаяЧасть=0;
			КонтекстМодуля.ОбработкаУдаленияПроведения();
		Исключение
			Ошибка(ОписаниеОшибки());
		КонецПопытки
		
		Если СтатусВозврата()=0 Тогда//была отмена в предопределенной процедуре
			//ОтменитьТранзакцию();
			Ошибка("Не удалось снять документ с проведения");
		КонецЕсли
		УдалитьДвижения();
		УстановитьАтрибутыИзКонтекста(КонтекстМодуля);
		УстановитьАтрибут("#IsPosted",0);
		Записать(1);
		ЗафиксироватьТранзакцию();
	Иначе
		НачатьТранзакцию();
		УдалитьДвижения();
		УстановитьАтрибут("#IsPosted",0);
		БазовыйОбъект.БазовыйОбъект.Записать();
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	ВызватьСобытие("ПослеОтменыПроведения",ТекущийДокумент());
	Возврат 1;
КонецФункции//СделатьНеПроведенным


//___________________________________________________________________________________________
Функция Проведен()Экспорт
	Возврат Число(ПолучитьАтрибут("#IsPosted"));
КонецФункции//Проведен

Процедура Удалить(Режим)Экспорт
	Если Проведен()=1 Тогда
		Если СделатьНеПроведенным()<>1 Тогда
			Возврат;
		КонецЕсли
	КонецЕсли
	Если Режим=1 Тогда
		ИнициализацияТабличнойЧастиБД();
		ТабличнаяЧастьБД.УдалитьПодчиненныеЭлементы();
	КонецЕсли
	БазовыйОбъект.Удалить(Режим);
КонецПроцедуры


//___________________________________________________________________________________________
Функция ПолучитьКартинкуЭлемента()Экспорт
	Если ПометкаУдаления()=0 Тогда
		Если Проведен()=0 Тогда
			Возврат 4;
		Иначе
			Возврат 5;
		КонецЕсли
	Иначе
		Возврат 10;
	КонецЕсли
КонецФункции//ПолучитьКартинкуЭлемента

//___________________________________________________________________________________________
Процедура Закрыть() Экспорт
	БазовыйОбъект.Закрыть();
КонецПроцедуры


//___________________________________________________________________________________________
//Загрузка структуры ТЗ по образу БД
Процедура ЗагрузитьСтруктуруТабличнойЧасти()
	ИнициализацияТабличнойЧастиБД();
	
	Если ТипЗначения(ТабличнаяЧасть)<=1 Тогда
		ТабличнаяЧасть=СоздатьОбъект("ТаблицаЗначений");
	КонецЕсли
	
	Если СписокТЧ[Вид()]=1 Тогда
		//сначала синхронизируем колонки, если в ТЗ их не хватает, то добавляем
		Для Кол=1 По ТабличнаяЧастьБД.ПолучитьКоличествоАтрибутов() Цикл
			Имя=ТабличнаяЧастьБД.ПолучитьИмяАтрибута(Кол);
			ВрегИмя=Врег(Имя);
			//Проверки базовых реквизитов
			Если ВрегИмя="ТЕКУЩИЙДОКУМЕНТ" Тогда
				Продолжить;
			ИначеЕсли ВрегИмя="ПЕРИОДДВИЖЕНИЯ" Тогда
				Продолжить;
			ИначеЕсли ВрегИмя="НОМЕРСТРОКИ" Тогда
				Продолжить;
			КонецЕсли
//			ТекНомер=ТабличнаяЧасть.ПолучитьНомерАтрибута(Имя);
//			Если ТекНомер=0 Тогда
//				ТабличнаяЧасть.НоваяКолонка(Имя);
//			ИначеЕсли Число(ТекНомер)=0 Тогда
//				ТекНомер=ТабличнаяЧасть.ПолучитьНомерАтрибута(Имя);
//			КонецЕсли
			Если ТабличнаяЧасть.ПолучитьНомерАтрибута(Имя)=0 Тогда
				ТабличнаяЧасть.НоваяКолонка(Имя);
				ТабличнаяЧасть.ВидимостьКолонки(Имя,0);
			КонецЕсли
		КонецЦикла
	КонецЕсли
КонецПроцедуры//ЗагрузитьСтруктуруТабличнойЧасти

//___________________________________________________________________________________________
//Загрузка строк из БД в таблицу значений
Процедура ЗагрузитьТабличнуюЧасть()
	ЗагрузитьСтруктуруТабличнойЧасти();
	ИнициализацияТабличнойЧастиБД();
	
	Если СписокТЧ[Вид()]=1 Тогда
		//заполняем данными (если они есть)
		Если Выбран()=1 Тогда
			КолСтрок=ТабличнаяЧастьБД.КоличествоЭлементов();
			ТабличнаяЧасть.КоличествоСтрок(КолСтрок);
			
			ТабличнаяЧастьБД.УстановитьПолеАвтоУпорядочивания("НомерСтроки");
			ТабличнаяЧастьБД.ВыбратьЭлементыБД();
			
			МасКолонок=СоздатьОбъект("Массив");
			Для Кол=1 По ТабличнаяЧасть.ПолучитьКоличествоАтрибутов() Цикл
				Имя=ТабличнаяЧасть.ПолучитьИмяАтрибута(Кол);
				Если ТабличнаяЧастьБД.ПолучитьНомерАтрибута(Имя)=0 Тогда
					Имя="";
				КонецЕсли
				МасКолонок[Кол]=Имя;//ТабличнаяЧастьБД.ПолучитьНомерАтрибута(Имя);
			КонецЦикла
			КоличествоАтрибутов=РазмерМассива(МасКолонок);
			
			Ном=0;
			Пока ТабличнаяЧастьБД.ПолучитьЭлемент()=1 Цикл
				Ном=Ном+1;
				Для Кол=1 По КоличествоАтрибутов Цикл
					Имя=МасКолонок[Кол];
					Если Имя Тогда
						Значение=ТабличнаяЧастьБД.ПолучитьАтрибут(Имя);
						ТабличнаяЧасть.УстановитьЗначение(Ном,Кол,Значение);
					КонецЕсли
				КонецЦикла
			КонецЦикла
			
			//			Пока ТабличнаяЧастьБД.ПолучитьЭлемент()=1 Цикл
			//				ТабличнаяЧасть.НоваяСтрока();
			//				Для Кол=1 По ТабличнаяЧасть.ПолучитьКоличествоАтрибутов() Цикл
			//					Имя=ТабличнаяЧасть.ПолучитьИмяАтрибута(Кол);
			//					ТабличнаяЧасть.УстановитьАтрибут(Имя,ТабличнаяЧастьБД.ПолучитьАтрибут(Имя));
			//				КонецЦикла
			//			КонецЦикла
		КонецЕсли
	КонецЕсли
КонецПроцедуры//ЗагрузитьТабличнуюЧасть


//___________________________________________________________________________________________
//Выгрузка строки из таблицы значений в БД
Процедура ВыгрузитьТабличнуюЧасть()
	
	ИнициализацияТабличнойЧастиБД();
	
	//удаляем старые строки
	ТабличнаяЧастьБД.УдалитьПодчиненныеЭлементы();
	
	//выгружаем новые
	Если ТипЗначения(ТабличнаяЧасть)>1 Тогда
		ТабличнаяЧасть.ВыбратьСтроки();
		Пока ТабличнаяЧасть.ПолучитьСтроку()=1 Цикл
			ТабличнаяЧастьБД.Новый();
			Для Кол=1 По ТабличнаяЧасть.ПолучитьКоличествоАтрибутов() Цикл
				Имя=ТабличнаяЧасть.ПолучитьИмяАтрибута(Кол);
				Значение=ТабличнаяЧасть.ПолучитьАтрибут(Имя);
				//Сообщить(""+Имя+"="+Значение);
				ТабличнаяЧастьБД.УстановитьАтрибут(Имя,Значение);
			КонецЦикла
			ТабличнаяЧастьБД.УстановитьАтрибут("НомерСтроки",ТабличнаяЧасть.НомерСтроки);
			ТабличнаяЧастьБД.УстановитьАтрибут("ТекущийДокумент",ПолучитьИдентификаторОбъекта());
			ТабличнаяЧастьБД.УстановитьАтрибут("ПериодДвижения",ДатаВСтроку(ПолучитьАтрибут("ДатаДок"),ПолучитьАтрибут("#ВремяДокумента")));
			ТабличнаяЧастьБД.Записать();
		КонецЦикла
	КонецЕсли
КонецПроцедуры//ВыгрузитьТабличнуюЧасть
//___________________________________________________________________________________________
Процедура НоваяСтрока()Экспорт
	Если ТабличнаяЧасть=0 Тогда
		ЗагрузитьТабличнуюЧасть();
	КонецЕсли
	Если ТипЗначения(ТабличнаяЧасть)>1 Тогда
		ТабличнаяЧасть.НоваяСтрока();
	КонецЕсли
КонецПроцедуры//НоваяСтрока


//___________________________________________________________________________________________
Функция ВыбратьСтроки()Экспорт
	Если ТабличнаяЧасть=0 Тогда
		ЗагрузитьТабличнуюЧасть();
	КонецЕсли
	
	НомерСтроки=0;
	БылаВыборка=1;
	Возврат ТабличнаяЧасть.ВыбратьСтроки();
КонецФункции//ВыбратьСтроки

//___________________________________________________________________________________________
Функция ПолучитьСтроку()Экспорт
	Если НЕ БылаВыборка Тогда
		Ошибка("Не было открытия выборки методом ВыбратьСтроки()");
	КонецЕсли
	Если ТабличнаяЧасть=0 Тогда
		ЗагрузитьТабличнуюЧасть();
	КонецЕсли

	Рез=ТабличнаяЧасть.ПолучитьСтроку();
	НомерСтроки=ТабличнаяЧасть.НомерСтроки;
	Возврат Рез;
КонецФункции//ПолучитьСтроку

//___________________________________________________________________________________________
Функция ПолучитьСтрокуПоНомеру(НомСтр)Экспорт
	Если ТабличнаяЧасть=0 Тогда
		ЗагрузитьТабличнуюЧасть();
	КонецЕсли
	Возврат ТабличнаяЧасть.ПолучитьСтрокуПоНомеру(НомСтр);
КонецФункции//ПолучитьСтрокуПоНомеру

//___________________________________________________________________________________________
Функция КоличествоСтрок()Экспорт
	Если ТипЗначения(ТабличнаяЧасть)>1 Тогда
		Возврат ТабличнаяЧасть.КоличествоСтрок();
	Иначе
		Возврат 0;
	КонецЕсли
КонецФункции//ВыбратьСтроки

//___________________________________________________________________________________________
Процедура УдалитьСтроки()Экспорт
	Если ТабличнаяЧасть=0 Тогда
		ЗагрузитьТабличнуюЧасть();
	КонецЕсли
	ТабличнаяЧасть.УдалитьСтроки();
КонецПроцедуры//УдалитьСтроки

////___________________________________________________________________________________________
////Позиционирование на заданный элемент
//Функция НайтиЭлемент(Объект) Экспорт
//	БазовыйОбъект.НайтиЭлемент(Объект);
//	ЗагрузитьТабличнуюЧасть();
//КонецФункции
//

//___________________________________________________________________________________________
//Новая запись на основе старых данных
Процедура НоваяКопия()Экспорт
	ТабличнаяЧасть=0;
	ЗагрузитьТабличнуюЧасть();
	БазовыйОбъект.НоваяКопия();
	ТабличнаяЧастьБД=0;
	
	СнятьПометкуУдаления();
	УстановитьАтрибут("#IsPosted",0);
КонецПроцедуры



//___________________________________________________________________________________________
Процедура ИнициализацияТабличнойЧастиБД()
	ТабличнаяЧастьБД=СоздатьОбъект("ТаблицаБД");
	Если СписокТЧ[Вид()]=1 Тогда
		ТабличнаяЧастьБД.Инициализация(ПолучитьТипОбъекта()+"."+Вид()+".ТабличнаяЧасть");
		ТабличнаяЧастьБД.УстановитьВладельца("ТекущийДокумент",ПолучитьИдентификаторОбъекта());
	КонецЕсли
КонецПроцедуры//ИнициализацияТабличнойЧастиБД




//___________________________________________________________________________________________
//Поддержка языка запросов, функция должна возвращать поле, которое имеет специальное представление (строка формата: ГГГГММЧЧччммсс + Прав(ИД,16), т.е. Год, Месяц, Число, час, минута, сек + 16 правых символов ИД объекта)
Функция ПолучитьПолеВременногоПозицианирования()Экспорт
	Возврат "ДатаДок";
КонецФункции//ПолучитьПолеВременногоПозицианирования


//___________________________________________________________________________________________
//Новая запись строки таблицы
Функция Новый()Экспорт
	Рез=БазовыйОбъект.Новый();
	
	ВремяДокумента=Число(СтрЗаменить(ТекущееВремя(),":"));
	УстановитьАтрибут("#ВремяДокумента",ВремяДокумента);
	Возврат Рез;
КонецФункции

//___________________________________________________________________________________________
Функция ПолучитьВремяДокумента()Экспорт
	ВремяДокумента=ПолучитьАтрибут("#ВремяДокумента");
	ВремяДокумента=Прав("000000"+ВремяДокумента,6);
	ЧЧ=Лев(ВремяДокумента,2);
	ММ=Сред(ВремяДокумента,3,2);
	СС=Сред(ВремяДокумента,5,2);
	
	Если Число(ЧЧ)>23 Тогда
		ЧЧ="00";
	КонецЕсли
	Если Число(ММ)>59 Тогда
		ММ="00";
	КонецЕсли
	Если Число(СС)>59 Тогда
		СС="00";
	КонецЕсли
	
	Возврат ЧЧ+":"+ММ+":"+СС;
КонецФункции//ПолучитьВремяДокумента

//___________________________________________________________________________________________
Процедура УстановитьВремяДокумента(УстВремя)Экспорт
	ВремяДокумента=УстВремя;
КонецПроцедуры//УстановитьВремяДокумента


Процедура УдалитьДвижения()Экспорт
	Регистр.ПривязатьКонтекст(Контекст);
	Регистр.УдалитьДвижения();
КонецПроцедуры//УдалитьДвижения


//___________________________________________________________________________________________
Функция Итог(ИмяРеквизита)Экспорт
	Если ТипЗначения(ТабличнаяЧасть)>1 Тогда
		Возврат ТабличнаяЧасть.Итог(ИмяРеквизита);
	КонецЕсли
	Возврат 0;
КонецФункции//Итог


//___________________________________________________________________________________________
Функция НайтиПоНомеру(Номер)Экспорт//НайтиПоНомеру(<Номер>)
	Возврат НайтиПоРеквизиту("НомерДок",Номер,1);
КонецФункции//НайтиПоНомеру
//
////___________________________________________________________________________________________
//Процедура НайтиПоКоду()
//КонецПроцедуры//НайтиПоКоду
////___________________________________________________________________________________________
//Процедура НайтиПоНаименованию()
//КонецПроцедуры//НайтиПоНаименованию

//___________________________________________________________________________________________
Функция ПрефиксНомера(Префикс)Экспорт//ПрефиксНомера(Префикс) - Установить/получить префикс номера для документа
	Возврат ПрефиксКода(Префикс);
КонецФункции//ПрефиксНомера

//___________________________________________________________________________________________
Процедура УстановитьНовыйНомер(Префикс)Экспорт//УстановитьНовыйНомер(Префикс) - Установить новый номер документа с заданным префиксом
	УстановитьНовыйКод(Префикс);
КонецПроцедуры//УстановитьНовыйНомер


//___________________________________________________________________________________________
Процедура УстановитьНовыйКод(Префикс)Экспорт Виртуально
	//	Перем НумераторОбъекта;
	//	НумераторОбъекта=СоздатьОбъект("Нумератор");
	//	Код=НумераторОбъекта.ПолучитьНовыйНомер(ПолучитьТипОбъекта()+"."+Вид(),Префикс);
	//	УстановитьАтрибут("НомерДок",Код);
	//	Возврат;
	
	ДатаДок=ПолучитьАтрибут("ДатаДок");
	Если ПустоеЗначение(ДатаДок) Тогда
		ДатаДок=РабочаяДата();
	КонецЕсли
	
	НачДата=НачГода(ДатаДок);
	Запрос=СоздатьОбъект("Запрос");
	Текст="//Запрос
	|Номер=Документ."+Вид()+".НомерДок;
	|Дата=Документ."+Вид()+".ДатаДок; 
	|Функция Макс=Максимум(Номер);
	|Условие(Дата>=НачДата);
	|";
	Запрос.Выполнить(Текст);
	
	Перем Номер=0;
	Если Запрос.ВыбратьСтроки()=1 Тогда
		Если Запрос.ПолучитьСтроку()=1 Тогда
			Номер=Запрос.Макс;
		КонецЕсли
	КонецЕсли
	Код=глПолучитьСледующийНомер(Номер);
	УстановитьАтрибут("НомерДок",Код);
КонецПроцедуры//УстановитьНовыйКод


//___________________________________________________________________________________________
Процедура ПриЗаписиПерепроводить(УстФлаг)Экспорт
	ПриЗаписиПерепроводить=УстФлаг;
КонецПроцедуры//ПриЗаписиПерепроводить

//___________________________________________________________________________________________
Функция Вид()Экспорт
	Возврат БазовыйОбъект.Вид();
КонецФункции//Вид

