//******************************************************************************************
Перем ИмяТаблицыОбъекта;
Перем НомерТаблицыОбъекта;
Перем ПрефиксТаблицыОбъекта;
Перем ТекущийТипОбъекта;
Перем ЭтоОбъект;
Перем ИмяИД;//имя поля для уникальной идентификации записей
Перем СтрокаВыборкиПолейБД;
Перем БылаИнициализация;

//Работа с данными
Перем ОбъектВыбран;//признак спозиционированности в БД
Перем Новый;//признак новой записи
Перем СписокПолей[];
Перем СписокЗначений[];//значения всех реквизитов теккущей записи
Перем ИД;//ИД текущей записи (только для объектов)
Перем Открыт;//признак открытой формы объекты
Перем СтрПолеАвтоУпорядочивания;
Перем ТолькоЧтение;//Режим работы в качествен ссылки (т.е. доступен только на чтение)

Перем ОбратныйПорядок;//Порядок выборки элементов БД
Перем ОграничиватьВыборку;

Перем масУсловияВыборки;//масУсловияВыборки - структура условий запроса (ключ по имени реквизита)
//	  содержит массив элементов типа структура с полями:
//	  Реквизит
//	  ОператорСравнения
//	  Значение
//Пример обращения:
//масУсловияВыборки["Код"][1].Реквизит
//масУсловияВыборки["Код"][1].ОператорСравнения
//масУсловияВыборки["Код"][1].Значение

/////////////////////////////////////////////////////////////////////////////////////////////
//Intelli-Sense:
//СписокПолей:Массив
//СписокЗначений:Массив
//БуферОбъектов:Массив


//******************************************************************************************
//МАКРОСЫ
//******************************************************************************************
//проверка инициализации объекта
#Задать	ПРОВЕРКА_ИНИЦИАЛИЗАЦИИ Если БылаИнициализация=0 Тогда	Ошибка("Объект не был инициализирован"); КонецЕсли;
//#Задать	ПРОВЕРКА_ИНИЦИАЛИЗАЦИИ

//проверка задания имени атрибута (при служебном обращении)
#Задать	ПРОВЕРКА_ИМЕНИ_АТРИБУТА Если НайтиАтрибут(ИмяАтрибута)=0 Тогда	Ошибка("Неправильно задано имя атрибута: "+ИмяАтрибута); КонецЕсли;
//#Задать	ПРОВЕРКА_ИМЕНИ_АТРИБУТА
//******************************************************************************************
	
	
	


//******************************************************************************************
//Предопределенные процедуры и функции объекта
//******************************************************************************************

//___________________________________________________________________________________________
//Динамическое получение атрибутов
Функция ПолучитьАтрибут(Имя) Экспорт
	ПРОВЕРКА_ИНИЦИАЛИЗАЦИИ;
	
	ПроверитьВыбранностьОбъекта();
	Возврат СписокЗначений[Имя];
КонецФункции

//___________________________________________________________________________________________
//Динамическое задание атрибутов
Процедура УстановитьАтрибут(Имя,Значение) Экспорт
	ПРОВЕРКА_ИНИЦИАЛИЗАЦИИ;
	
	ПроверитьВыбранностьОбъекта();
	СписокЗначений[Имя]=Значение;
КонецПроцедуры

//___________________________________________________________________________________________
Функция ПолучитьИмяАтрибута(Номер)Экспорт
	ПРОВЕРКА_ИНИЦИАЛИЗАЦИИ;
	
	Возврат СписокПолей.ИдентификаторПоНомеру(Номер);
КонецФункции

//___________________________________________________________________________________________
Функция ПолучитьКоличествоАтрибутов()Экспорт
	ПРОВЕРКА_ИНИЦИАЛИЗАЦИИ;
	
	Возврат РазмерСтруктуры(СписокПолей);
КонецФункции

//___________________________________________________________________________________________
Функция НайтиАтрибут(Имя)Экспорт
	ПРОВЕРКА_ИНИЦИАЛИЗАЦИИ;
	
	Возврат СписокПолей.НайтиИдентификатор(Имя);
КонецФункции

//___________________________________________________________________________________________
Функция ПолучитьНомерАтрибута(Имя)Экспорт
	ПРОВЕРКА_ИНИЦИАЛИЗАЦИИ;
	
	Возврат СписокПолей.НайтиНомерИдентификатора(Имя);
КонецФункции


//___________________________________________________________________________________________
//Установка внутреннего идентификатора (номера в БД) объекта 
//(или условное позиционирование объекта)
Процедура УстановитьИдентификаторОбъекта(НовИдентификатор)Экспорт
	Если ТолькоЧтение=1 Тогда
		Ошибка("Объект доступен только на чтение");
	КонецЕсли
	Если ЭтоОбъект=1 Тогда
		ИД=НовИдентификатор;
		Новый=0;
		ОбъектВыбран=0;
	Иначе
		СписокЗначений[ИмяИД]=НовИдентификатор;
	КонецЕсли
КонецПроцедуры

//___________________________________________________________________________________________
Процедура УстановитьИмяИдентификатора(Имя)Экспорт
	ИмяИД=Имя;
КонецПроцедуры

//___________________________________________________________________________________________
//Получение внутреннего идентификатора объекта 
Функция ПолучитьИдентификаторОбъекта()Экспорт
	
	Если ЭтоОбъект=1 Тогда
		Возврат Число(ИД);
	Иначе
		Возврат СтрИзЗначения(ИмяИД,СписокЗначений[ИмяИД]);
	КонецЕсли
КонецФункции

//___________________________________________________________________________________________
Функция ПолучитьИмяИдентификатора()Экспорт
	Если ЭтоОбъект=1 Тогда
		Возврат "ID";
	Иначе
		Возврат ИмяИД;
	КонецЕсли
КонецФункции

//___________________________________________________________________________________________
Функция ПолучитьПолеИдентификатораВБД()Экспорт
	ПРОВЕРКА_ИНИЦИАЛИЗАЦИИ;
	
	Если ЭтоОбъект=1 Тогда
		Возврат "ID";
	Иначе
		Возврат ПолучитьИмяПоляБД(ИмяИД);
	КонецЕсли
КонецФункции


//___________________________________________________________________________________________
//Строковое представление объекта
Функция ПолучитьПредставлениеОбъекта()Виртуально Экспорт
	Если ОбъектВыбран Тогда
		Возврат "<>";
	Иначе
		Возврат "";
	КонецЕсли
КонецФункции

//___________________________________________________________________________________________
//Вызывается при открытии любой подчиненной формы
Процедура ОбработкаОткрытияФормы(Конт) Экспорт
	Открыт=1;
КонецПроцедуры

//___________________________________________________________________________________________
//Вызывается при закрытии любой подчиненной формы
Процедура ОбработкаЗакрытияФормы(Конт,НомерВызова) Экспорт
	Если НомерВызова=2 Тогда
		Открыт=0;
	КонецЕсли
КонецПроцедуры

//___________________________________________________________________________________________
//Конструктор (вызывается при инициализации объекта)
//ВидОбъекта - вид объекта, задающийся строкой следуемой за символом "."
//Параметр - произвольный параметр (для визуальных элементов - объект базового класса)
Процедура Конструктор(ВидОбъекта,Параметр)
	//масУсловияВыборки=СоздатьОбъект("Структура");
	БылаИнициализация=0;
	ЭтоОбъект=1;
	ОбъектВыбран=0;
	Новый=0;
	ИД=0;

	
	Если НЕ глБылаПроверкаТаблицыМетаданных Тогда
		глБылаПроверкаТаблицыМетаданных=1;
		ПроверитьТаблицуМетаданных();
	КонецЕсли
	
КонецПроцедуры

//___________________________________________________________________________________________
Процедура Деструктор()
	
КонецПроцедуры//Деструктор

Процедура ПроверитьТаблицуМетаданных()
	Если КлиентБД=0 Тогда//учет Клиент-Сервера
		Если МонопольныйРежим() Тогда
			Если СуществуетТаблица("metadata")=0 Тогда
				СтрокаЗапроса="CREATE TABLE metadata(id int,obj char(100),attr char(50),prefix char(10),db_table char(15),db_field char(8),type char(50),len int,prec int,comment char(50),flag int)";
				Запрос(СтрокаЗапроса);
			КонецЕсли
		КонецЕсли
	КонецЕсли
КонецПроцедуры


//___________________________________________________________________________________________
//Обрабочик событий визуального объекта
//Возвращает:
//0 - событие не обработано (передается в форму для дальнейшей обработки)
//1 - событие обработано (далее в форму не передается)
//ИмяСобытия - имя события как оно задано в окне свойств конфигуратора
Функция ОбработкаСобытия(ИмяСобытия) Экспорт
	
	Возврат 0;
КонецФункции
//___________________________________________________________________________________________
//Вызывается при попытке присвоить значение диалоговому элементу или запрещенной для записи переменной
//Процедура УстановитьЗначение(Значение) Экспорт
//
//КонецПроцедуры

//******************************************************************************************
//******************************************************************************************
//******************************************************************************************
//РАБОТА СО СТРУКТУРОЙ

Процедура ОчиститьСписокПолей()Экспорт
	СписокПолей=СоздатьОбъект("Структура");
КонецПроцедуры

Процедура ДобавитьПоле(Имя,Тип,Длина,Точность,ИмяРеквизитаБД="")Экспорт
	Если ПустоеЗначение(ИмяРеквизитаБД)=1 Тогда
		 ИмяРеквизитаБД=Имя;
	КонецЕсли
	
	Структура=СоздатьОбъект("Структура");
	Структура.Имя=Имя;
	Структура.ИмяРеквизитаБД=ИмяРеквизитаБД;
	Структура.Тип=Тип;
	Структура.Длина=Число(Длина);
	Структура.Точность=Число(Точность);
	
	//типизация полей (для облегченного доступа из объектов)
	Если Сокрлп(ВРЕГ(Тип))="ЧИСЛО" Тогда
		ТипНом=1;
	ИначеЕсли Сокрлп(ВРЕГ(Тип))="СТРОКА" Тогда
		ТипНом=2;
	ИначеЕсли Сокрлп(ВРЕГ(Тип))="ДАТА" Тогда
		ТипНом=3;
	Иначе//агрегатный объект
		ТипНом=100;//ПолучитьНомерОбъекта(Тип);
	КонецЕсли
	Структура.ТипНом=ТипНом;
	СписокПолей[Имя]=Структура;
	БылаИнициализация=1;//для случая локального использования (например в объекте Константа)
КонецПроцедуры

//___________________________________________________________________________________________
//Выполняет запрос и возвращает значение из первой колонки первой строки
Функция ПолучитьЗначениеЗапроса(Текст)
	Запрос(Текст);
	Если ПолучитьСтроку()=1 Тогда
		Возврат ПолучитьПоле(1);
	КонецЕсли
	Возврат "";
КонецФункции

Функция ПолучитьНомерОбъекта(ТипВид,ВызыватьОшибку=0,ТипВидБД="")Экспорт
	Номер=Число(глТаблицаТиповСтр[ТипВид]);
	Если Номер=0 Тогда
		Если ВызыватьОшибку Тогда
			Ошибка("Агрегатный объект "+ТипВид+" в базе данных не определен");
		КонецЕсли
		Если ПустоеЗначение(ТипВидБД)=1 Тогда
			 ТипВидБД=ТипВид;
		КонецЕсли
		
		Номер=Число(ПолучитьЗначениеЗапроса("SELECT max(id) FROM metadata WHERE obj='"+ТипВидБД+"' AND prefix='"+ПрефиксТаблицыОбъекта+"'"));
		//Сообщить("Номер="+Номер);
		Если Номер=0 Тогда
			Если ТипСоединения()=ConnectionDBF Тогда
				Если Число(ПолучитьЗначениеЗапроса("SELECT COUNT(*) FROM metadata"))=0 Тогда
					Возврат 1;
				КонецЕсли
			КонецЕсли
			
			Возврат 1+Число(ПолучитьЗначениеЗапроса("SELECT max(id) FROM metadata"));
		Иначе
			глТаблицаТиповНом[Номер]=ТипВид;
			глТаблицаТиповСтр[ТипВид]=Номер;
		КонецЕсли
	КонецЕсли
	
	Возврат Номер;
КонецФункции


//___________________________________________________________________________________________
//Процедура выпоняет верификацию таблицы БД (в случае необходимости - создание)
//РежОбъект:	1-таблица предназначена для хранения объекта, 0 - служебная таблица (н-р, многострочная часть документа)
//				2-спец. таблица объекта с прямым заданием имени
//МультиРежим:	0-режим монопольный режим владения таблицей одной конфигурацией,
//				1-разделенный режим использования между разными конфигурациями
//ТипВидБД:		Тип и вид объекта, как они представлены в таблице метаданных базы данных
Процедура НачальнаяИнициализация(ТипВид,ПрефиксТаблицы,РежОбъект,МультиРежим,ТипВидБД="")Экспорт

	РазрешитьРеструктуризацию=0;//учет первого входа и условия, что это не Клиент сервера
	Если КлиентБД=0 Тогда//учет Клиент-Сервера
		 Если МонопольныйРежим() Тогда
			 РазрешитьРеструктуризацию=1;
		 КонецЕсли
	КонецЕсли
	
	Если РазрешитьРеструктуризацию Тогда
//		УспешеыйВызов=ВызватьСобытие("ГлобальнаяБлокировка",1);
//		Если НЕ УспешеыйВызов Тогда
//			 Предупреждение("УспешеыйВызов=0");
//		КонецЕсли
		НачатьТранзакцию();
	КонецЕсли
	
	
	НачальнаяИнициализация2(ТипВид,ПрефиксТаблицы,РежОбъект,МультиРежим,ТипВидБД,РазрешитьРеструктуризацию);
	Если РазрешитьРеструктуризацию Тогда
		ЗафиксироватьТранзакцию();
//		УспешеыйВызов=ВызватьСобытие("ГлобальнаяБлокировка",0);
//		Если НЕ УспешеыйВызов Тогда
//			 Предупреждение("УспешеыйВызов=0");
//		КонецЕсли
	КонецЕсли
КонецПроцедуры

Процедура НачальнаяИнициализация2(ТипВид,ПрефиксТаблицы,РежОбъект,МультиРежим,ТипВидБД,РазрешитьРеструктуризацию)
	Если ПустоеЗначение(ТипВидБД)=1 Тогда
		 ТипВидБД=ТипВид;
	КонецЕсли
	
	ЭтоОбъект=Число(РежОбъект);
	МультиРежим=Число(МультиРежим);
	ПрефиксТаблицыОбъекта=ПрефиксТаблицы;
	Если Сокрлп(ПрефиксТаблицыОбъекта)="" Тогда
		Если ЭтоОбъект=2 Тогда
			Ошибка("Не задано имя (префикс) таблицы");
		КонецЕсли
		ПрефиксТаблицыОбъекта="d";
	КонецЕсли
	
	Если Сокрлп(ТипВид)="" Тогда
		Ошибка("Не задан тип и вид объекта (1-й параметр метода)");
	КонецЕсли
	
	Если РазмерСтруктуры(СписокПолей)=0 Тогда
		Ошибка("Не задана структура полей таблицы");
	КонецЕсли
	
	//#IsDel -  системный реквизит
	Если ЭтоОбъект Тогда
		Если НЕ СписокПолей["#IsDel"] Тогда
			ДобавитьПоле("#IsDel","Строка",1,0);
		КонецЕсли
		Если НЕ СписокПолей["#Counter"] Тогда
			ДобавитьПоле("#Counter","Число",11,0);//количество перезаписей объекта
		КонецЕсли
	КонецЕсли
	
	Попытка
		Запрос("SELECT * FROM metadata WHERE obj='"+ТипВидБД+"'");
	Исключение
		Предупреждение("Неопределена системная таблица Метаданные. Требуется монопольный вход.");
		ЗавершитьРаботуСистемы(-1);
	КонецПопытки
	
	МасЗапроса=ПолучитьВсеЗначения();//возвращает массив структур
	//заполняем массив полей, как они фактически заданы в БД (из массива прегоняем в структуру для быстрого поиска по имени)
	СписокПолейБД=СоздатьОбъект("Структура");
	Для А=1 По РазмерМассива(МасЗапроса) Цикл
		ИмяРеквизитаБД=МасЗапроса[А].attr;
		СписокПолейБД[ИмяРеквизитаБД]=МасЗапроса[А];
	КонецЦикла
	
	//сравниваем поля таблицы с фактическим их наличием в БД
	НужнаРеструктуризация=0;
	Если НЕ МультиРежим Тогда
		НужнаРеструктуризация=(РазмерСтруктуры(СписокПолей)<>РазмерСтруктуры(СписокПолейБД));
	КонецЕсли
	
	Для А=1 По  РазмерСтруктуры(СписокПолей) Цикл
		МасПоля=СписокПолей.ЗначениеПоНомеру(А);
		//Имя=СписокПолей.ИдентификаторПоНомеру(А);
		ИмяРеквизитаБД=МасПоля.ИмяРеквизитаБД;
		МасПоляБД=СписокПолейБД[ИмяРеквизитаБД];
		Если ТипЗначения(МасПоляБД)=0 Тогда//нет такого поля
			НужнаРеструктуризация=1;
			Прервать;
		КонецЕсли
		
		//проверяем тип, длину и точность поля
		Если ТребуетсяРеструктуризация(МасПоляБД.type,МасПоляБД.len,МасПоляБД.prec,
									   МасПоля.Тип,МасПоля.Длина,МасПоля.Точность,МультиРежим) Тогда
			НужнаРеструктуризация=1;
			Прервать;
		КонецЕсли
		
		//есть такое поле и типы совпадают...
		МасПоля.ИмяПоляБД=МасПоляБД.db_field;
	КонецЦикла
	

	
			
	
	НомерТаблицыОбъекта=ПолучитьНомерОбъекта(ТипВид,0,ТипВидБД);
	Если ЭтоОбъект=2 Тогда
		ИмяТаблицыОбъекта=ПрефиксТаблицыОбъекта;
	Иначе
		ИмяТаблицыОбъекта=ПрефиксТаблицыОбъекта+НомерТаблицыОбъекта;
	КонецЕсли
	
	
	
	Если СуществуетТаблица(ИмяТаблицыОбъекта)=0 Тогда
		НужнаРеструктуризация=1;
	КонецЕсли

	Если НужнаРеструктуризация И РазрешитьРеструктуризацию Тогда
		ФлагЗапрета=Число(ВызватьСобытие("РеструктуризацияДанных",ТипВид));
		Если ФлагЗапрета Тогда
			РазрешитьРеструктуризацию=0;
		КонецЕсли
	КонецЕсли
	
	Если НужнаРеструктуризация=1 И РазрешитьРеструктуризацию=0 Тогда
		 //Необходима реструктуризация данных, но она запрещена
		 //например, из-за разделенного (немонопольного) режима.
		 //Выполняем аварийный выход программы.
		Стр="Измениласть структура метаданных. Требуется вход в монопольном режиме.";
		Сообщить(Стр);
		Предупреждение(Стр);
		ЗавершитьРаботуСистемы(-1);//аварийный выход
		Возврат;
	КонецЕсли
		
	Если РазрешитьРеструктуризацию Тогда//учет первого входа и условия, что это не Клиент сервера
//		Если СуществуетТаблица(ИмяТаблицыОбъекта)=0 Тогда
//			НужнаРеструктуризация=1;
//		КонецЕсли
		
		
		Если НужнаРеструктуризация=1 Тогда
			глБылаРеструктуризация();
		
			//переименовываем старую таблицу БД
			ИмяТаблицыОбъекта2="";
			Если СуществуетТаблица(ИмяТаблицыОбъекта)=1 Тогда
				ИмяТаблицыОбъекта2=СокрЛП(ИмяТаблицыОбъекта)+"2";
				ПереименоватьТаблицу(ИмяТаблицыОбъекта,ИмяТаблицыОбъекта2);
			КонецЕсли
			

			//Подготавливаем список полей в нашей конфигураии по их названию в БД			
			СписокПолейПоИДБД=СоздатьОбъект("Структура");
			Для А=1 По  РазмерСтруктуры(СписокПолей) Цикл
				МасПоля=СписокПолей.ЗначениеПоНомеру(А);
				ИмяРеквизитаБД=МасПоля.ИмяРеквизитаБД;
				СписокПолейПоИДБД[ИмяРеквизитаБД]=МасПоля;
			КонецЦикла;
			
			
			//при разделенном (мульти) режиме сохраняем поля, испльзующиеся в других конфигурациях
			Если МультиРежим=1 Тогда
				Для А=1 По РазмерСтруктуры(СписокПолейБД) Цикл
					ИмяРеквизитаБД=СписокПолейБД.ИдентификаторПоНомеру(А);
					МасПоляБД=СписокПолейБД.ЗначениеПоНомеру(А);
					Если ТипЗначения(МасПоляБД)<>0 Тогда//есть такое поле в БД
						МасПоля=СписокПолейПоИДБД[ИмяРеквизитаБД];
						Если ТипЗначения(МасПоля)=0 Тогда//нет такого поля в нашей конфигурации - все равно добавляем со спец. пометкой для корректной реструктуризации таблицы
							ТекПоле=СоздатьОбъект("Структура");
							ТекПоле.Тип=МасПоляБД.type;
							ТекПоле.Длина=МасПоляБД.len;
							ТекПоле.Точность=МасПоляБД.prec;
							ТекПоле.Имя="Add:"+ИмяРеквизитаБД;
						Иначе//проверяем соответствие типов
							ТекПоле=ПолучитьРасширениеТипа(МасПоляБД.type,Число(МасПоляБД.len),Число(МасПоляБД.prec),МасПоля.Тип,МасПоля.Длина,МасПоля.Точность);
							ТекПоле.Имя=МасПоля.Имя;//добавляем имя реквизита в нашей конфигурации
						КонецЕсли
						ТекПоле.ИмяРеквизитаБД=ИмяРеквизитаБД;
						СписокПолей[ТекПоле.Имя]=ТекПоле;
					КонецЕсли
				КонецЦикла
			КонецЕсли
			
			
			//удаляем информацию о полях текущего объекта из таблицы метаданных
			МожноУдалять=1;
			Если ТипСоединения()=ConnectionDBF Тогда
				Если Число(ПолучитьЗначениеЗапроса("SELECT COUNT(*) FROM metadata"))=0 Тогда
					МожноУдалять=0;
				КонецЕсли
			КонецЕсли
			Если МожноУдалять Тогда
				Запрос("DELETE FROM metadata where obj='"+ТипВидБД+"' AND prefix='"+ПрефиксТаблицыОбъекта+"'");
			КонецЕсли
			
			
			//Подготавливаем список имент полей как они представлены в БД по их значению ИдентификаторБД
			//Таким образом для одинаковых значений ИдентификаторБД
			СписокПолейБДПоАтрибутамБД=СоздатьОбъект("Структура");
			Для А=1 По  РазмерСтруктуры(СписокПолей) Цикл
				ИмяПоляБД="col"+А;
				МасПоля=СписокПолей.ЗначениеПоНомеру(А);
				ИмяРеквизитаБД=МасПоля.ИмяРеквизитаБД;
				СписокПолейБДПоАтрибутамБД[ИмяРеквизитаБД]=ИмяПоляБД;
			КонецЦикла
			
			//добавляем в таблицу метаданных соответствующую информацию
			СтрПолей="";
			Для А=1 По РазмерСтруктуры(СписокПолей) Цикл
				Имя=СписокПолей.ИдентификаторПоНомеру(А);
				МасПоля=СписокПолей[Имя];
				Тип=МасПоля.Тип;
				Длина=МасПоля.Длина;
				Точность=МасПоля.Точность;
				ИмяРеквизитаБД=МасПоля.ИмяРеквизитаБД;
				
				ИмяПоляБД=СписокПолейБДПоАтрибутамБД[ИмяРеквизитаБД];
				МасПоля.ИмяПоляБД=ИмяПоляБД;
				
				//подготавливаем данные для создания таблицы
				ПривестиТипКБазеДанных(Тип,Длина,Точность);
				Если Врег(Тип)="ЧИСЛО" Тогда
					Если ТипСоединения()=ConnectionDBF Тогда
						СтрПолей=СтрПолей+ИмяПоляБД+" NUMERIC("+Длина+","+Точность+"),";
					Иначе
						СтрПолей=СтрПолей+ИмяПоляБД+" DECIMAL("+Длина+","+Точность+"),";
					КонецЕсли
					
				Иначе
					Если Число(Длина)=0 Тогда
						СтрПолей=СтрПолей+ИмяПоляБД+" TEXT,";
					Иначе
						СтрПолей=СтрПолей+ИмяПоляБД+" CHAR("+Длина+"),";
					КонецЕсли
				КонецЕсли
				
				Запрос("INSERT INTO metadata(id,obj,attr,prefix,db_table,db_field,type,len,prec,flag)values"+
				"("+НомерТаблицыОбъекта+",'"+ТипВидБД+"','"+ИмяРеквизитаБД+"','"+ПрефиксТаблицыОбъекта+"','"+ИмяТаблицыОбъекта+"','"+ИмяПоляБД+"','"+
				МасПоля.Тип+"',"+Число(МасПоля.Длина)+","+Число(МасПоля.Точность)+",0)");
			КонецЦикла
			
			//создаем новую таблицу		
			СтрПолей=ВРЕГ(Лев(СтрПолей,СтрДлина(СтрПолей)-1));
			Если ЭтоОбъект=1 Тогда
				Если ТипСоединения()=ConnectionDBF Тогда
					СтрокаЗапроса="CREATE TABLE "+ИмяТаблицыОбъекта+"(ID NUMERIC (20),"+ СтрПолей+")";
				Иначе
					СтрокаЗапроса="CREATE TABLE "+ИмяТаблицыОбъекта+"(ID BIGINT AUTO_INCREMENT PRIMARY KEY,"+ СтрПолей+")";
				КонецЕсли
			Иначе
				СтрокаЗапроса="CREATE TABLE "+ИмяТаблицыОбъекта+"("+ СтрПолей+")";
			КонецЕсли
			Запрос(СтрокаЗапроса);
			
			
			Если СокрЛП(ИмяТаблицыОбъекта2)<>"" Тогда
				//перегружаем данные из старой таблицы в новую
				СтрДанных="";
				СтрПолей="";
				Для А=1 По  РазмерСтруктуры(СписокПолей) Цикл
					Имя=СписокПолей.ИдентификаторПоНомеру(А);
					МасПоля=СписокПолей[Имя];
					МасПоляБД=СписокПолейБД[Имя];
					Если ТипЗначения(МасПоляБД)<>0 Тогда
						СтрДанных=СтрДанных+МасПоляБД.db_field+",";
					Иначе//нет такого поля в БД
						СтрДанных=СтрДанных+"'',";
					КонецЕсли
					СтрПолей=СтрПолей+МасПоля.ИмяПоляБД+",";
				КонецЦикла
				СтрДанных=ВРЕГ(Лев(СтрДанных,СтрДлина(СтрДанных)-1));
				СтрПолей=ВРЕГ(Лев(СтрПолей,СтрДлина(СтрПолей)-1));
				
				Если ЭтоОбъект=1 Тогда
					СтрокаЗапроса="INSERT INTO "+ИмяТаблицыОбъекта+"(ID,"+ СтрПолей+") SELECT ID,"+СтрДанных+" FROM "+ИмяТаблицыОбъекта2;
				Иначе
					СтрокаЗапроса="INSERT INTO "+ИмяТаблицыОбъекта+"("+ СтрПолей+") SELECT "+СтрДанных+" FROM "+ИмяТаблицыОбъекта2;
				КонецЕсли
				Запрос(СтрокаЗапроса);
				
				
				
				
				//удаляем старую таблицу БД
				УдалитьТаблицу(ИмяТаблицыОбъекта2);
			КонецЕсли
		КонецЕсли
	КонецЕсли

	ТекущийТипОбъекта=ТипВид;
	
	
	СтрокаВыборкиПолейБД="";
	Для А=1 По РазмерСтруктуры(СписокПолей) Цикл
		МасПоля=СписокПолей.ЗначениеПоНомеру(А);
		СтрокаВыборкиПолейБД=СтрокаВыборкиПолейБД+МасПоля.ИмяПоляБД+",";
	КонецЦикла
	СтрокаВыборкиПолейБД=ВРЕГ(Лев(СтрокаВыборкиПолейБД,СтрДлина(СтрокаВыборкиПолейБД)-1));
	
	Структура=СоздатьОбъект("Структура");
	Структура.СписокПолей=СписокПолей;
	Структура.ИмяТаблицыОбъекта=ИмяТаблицыОбъекта;
	Структура.НомерТаблицыОбъекта=НомерТаблицыОбъекта;
	Структура.ПрефиксТаблицыОбъекта=ПрефиксТаблицыОбъекта;
	Структура.ЭтоОбъект=ЭтоОбъект;
	Структура.СтрокаВыборкиПолейБД=СтрокаВыборкиПолейБД;
	Структура.ИмяИД=ИмяИД;
	глСписокСтруктурОбъектов[ТипВид]=Структура;
	
	
КонецПроцедуры


//___________________________________________________________________________________________
//Возвращает строку типа поля атрибута (как он был задан в методе ДобавитьПоле)
Функция ПолучитьТипПоля(ИмяАтрибута)Экспорт
	ПРОВЕРКА_ИНИЦИАЛИЗАЦИИ;
	
	ПРОВЕРКА_ИМЕНИ_АТРИБУТА;
	
	Возврат СписокПолей[ИмяАтрибута].Тип;
КонецФункции

//___________________________________________________________________________________________
//Возвращает имя поля БД по имени реквизита
Функция ПолучитьИмяПоляБД(ИмяАтрибута)Экспорт
	ПРОВЕРКА_ИНИЦИАЛИЗАЦИИ;
	
	ПРОВЕРКА_ИМЕНИ_АТРИБУТА;
	
	Возврат СписокПолей[ИмяАтрибута].ИмяПоляБД;
КонецФункции

//___________________________________________________________________________________________
//Возвращает число - длину поля атрибута (как оно был задан в методе ДобавитьПоле)
Функция ПолучитьДлинуПоля(ИмяАтрибута)Экспорт
	ПРОВЕРКА_ИНИЦИАЛИЗАЦИИ;
	
	ПРОВЕРКА_ИМЕНИ_АТРИБУТА;
	
	Возврат СписокПолей[ИмяАтрибута].Длина;
КонецФункции

//___________________________________________________________________________________________
//Возвращает число - точность поля атрибута (как оно был задан в методе ДобавитьПоле)
Функция ПолучитьТочностьПоля(ИмяАтрибута)Экспорт
	ПРОВЕРКА_ИНИЦИАЛИЗАЦИИ;
	
	ПРОВЕРКА_ИМЕНИ_АТРИБУТА;
	
	Возврат СписокПолей[ИмяАтрибута].Точность;
КонецФункции

//___________________________________________________________________________________________
//Процедура преобразует различные варианты Типов объекта к двум стандартным: Число и Строка
Процедура ПривестиТипКБазеДанных(Тип,Длина,Точность)
	Тип=Врег(Тип);
	Если Тип="ДАТА" Тогда
		Тип="ЧИСЛО";
		Длина=17;
		Точность=0;
	ИначеЕсли Сокрлп(Тип)="" Тогда//Неопределенный
		Тип="СТРОКА";
		Длина=30;
		Точность=0;
	ИначеЕсли Тип<>"ЧИСЛО" И Тип<>"СТРОКА" Тогда//Объект
		Тип="ЧИСЛО";
		Длина=20;
		Точность=0;
	КонецЕсли
КонецПроцедуры

//___________________________________________________________________________________________
//Сравнение двух Типов и возврат такого Типа, который включает в себя все
Функция ПолучитьРасширениеТипа(Знач ТипБД,Знач ДлинаБД,Знач ТочностьБД,Знач Тип,Знач Длина,Знач Точность)
	РасшТип=СоздатьОбъект("Структура");
	
	ПривестиТипКБазеДанных(Тип,Длина,Точность);	
	ПривестиТипКБазеДанных(ТипБД,ДлинаБД,ТочностьБД);	
	Если Длина=0 Тогда
		Длина=10000;//Text
	КонецЕсли
	Если ДлинаБД=0 Тогда
		ДлинаБД=10000;//Text
	КонецЕсли
	
	Если ТипБД="ЧИСЛО" Тогда
		Если Тип="ЧИСЛО" Тогда
			ТочностьБД=Макс(ТочностьБД,Точность);
			ДлинаБД=Макс(ДлинаБД-ТочностьБД,Длина-Точность)+ТочностьБД;
		Иначе//Если Тип="СТРОКА" Тогда
			ТипБД="СТРОКА";
			ДлинаБД=Макс(ДлинаБД+ТочностьБД+1,Длина);//1 - для учета точки
			ТочностьБД=0;
		КонецЕсли
	ИначеЕсли ТипБД="СТРОКА" Тогда
		ДлинаБД=Макс(ДлинаБД,Длина+Точность+1);//1 - для учета точки
		ТочностьБД=0;
	КонецЕсли
	
	
	Если ДлинаБД>=10000 Тогда
		ДлинаБД=0;//Text
	КонецЕсли
	
	РасшТип.Тип=ТипБД;
	РасшТип.Длина=ДлинаБД;
	РасшТип.Точность=ТочностьБД;
	
	Возврат РасшТип;
КонецФункции


//___________________________________________________________________________________________
//Сравнение Типов на их равенство (МультиРежим=0) либо на вхождение в Тип базы данных (МультиРежим=1)
Функция ТребуетсяРеструктуризация(Знач ТипБД,Знач ДлинаБД,Знач ТочностьБД,Знач Тип,Знач Длина,Знач Точность,МультиРежим)
	ТипБД=Врег(ТипБД);
	Тип=Врег(Тип);
	Если Тип=ТипБД И Число(Длина)=Число(ДлинаБД) И Число(Точность)=Число(ТочностьБД) Тогда
		Возврат 0;
	КонецЕсли
	Если МультиРежим=0 Тогда
		Возврат 1;
	Иначе
		РасшТип=ПолучитьРасширениеТипа(ТипБД,Число(ДлинаБД),Число(ТочностьБД),Тип,Длина,Точность)
		Возврат ТребуетсяРеструктуризация(РасшТип.Тип,РасшТип.Длина,РасшТип.Точность,ТипБД,ДлинаБД,ТочностьБД,0);//проверка на прстое равенство
	КонецЕсли
КонецФункции



//******************************************************************************************
//******************************************************************************************
//******************************************************************************************
//РАБОТА С ДАННЫМИ
//___________________________________________________________________________________________
//Преобразование типов из представления в базе данных в объектное представление
Функция ЗначениеИзСтр(ИмяАтрибутаСтр,ИдСтр) Экспорт
	Перем Объект;
	Если Сокрлп(ИмяАтрибутаСтр)="" Тогда
		Возврат "";//Ошибка("Не задано имя атрибута");
	КонецЕсли
	
	//Структура=СписокПолей[ИмяАтрибутаСтр];
	ТипНом=Число(СписокПолей[ИмяАтрибутаСтр].ТипНом);
	Если ТипНом=1 Тогда//Число
		Возврат Число(ИдСтр);
	ИначеЕсли ТипНом=2 Тогда//Строка
		Возврат ИдСтр;
	ИначеЕсли ТипНом=3 Тогда//Дата
		Возврат СтрокаВДату(ИдСтр);
	Иначе
		Если Число(ИдСтр)=0 Тогда
			ТипСтр=СписокПолей[ИмяАтрибутаСтр].Тип;
			Если Сокрлп(ТипСтр)="" Тогда
				Перем Пусто;
				Возврат Пусто;
			Иначе
				Попытка
					//сначала ищем в буфере
					Если НайтиОбъект(ТипСтр+"-"+ИдСтр,Объект)=1 Тогда
						 Возврат Объект;
					КонецЕсли
					
					Объект=СоздатьОбъект(ТипСтр);
					Если ТипЗначения(Объект)>5 Тогда
						Если ПустоеЗначение(ИдСтр)=0 Тогда
							Объект.УстановитьИдентификаторОбъекта(ИдСтр);
						КонецЕсли
					Иначе
						Объект=ИдСтр;
					КонецЕсли
					ДобавитьОбъект(ТипСтр+"-"+ИдСтр,Объект);//заполняем буфер
					Возврат Объект;
				Исключение
					Возврат "";
				КонецПопытки
			КонецЕсли
		Иначе
			Возврат ПолучитьАгрегатныйОбъект(ИдСтр);
		КонецЕсли
	КонецЕсли
КонецФункции

//___________________________________________________________________________________________
//Преобразование из объектного представления в значение базы данных
Функция СтрИзЗначения(ИмяАтрибутаСтр,Значение) Экспорт
	Если Сокрлп(ИмяАтрибутаСтр)="" Тогда
		Ошибка("Не задано имя атрибута!");
	КонецЕсли
	
	ТипНом=СписокПолей[ИмяАтрибутаСтр].ТипНом;
	Если ТипНом=1 Тогда//Число
		Возврат Число(Значение);
	ИначеЕсли ТипНом=2 Тогда//Строка
		Если ТипСоединения()=ConnectionMySQL Тогда
			Значение=СтрЗаменить(Значение,"\","\\");
		КонецЕсли;	
		Если Прав(Значение,1)="\" Тогда
		    Значение=Значение+" ";
		КонецЕсли;    
		Возврат "'"+СтрЗаменить(Значение,"'","\'")+"'";
	ИначеЕсли ТипНом=3 Тогда//Дата
		Рез=ДатаВСтроку(Значение);
		Если Сокрлп(Рез)="" Тогда
			Рез=0;
		КонецЕсли
		Возврат Рез;
	Иначе
		Если ТипЗначения(Значение)>=10 Тогда
			Попытка
				Рез=Значение.ПолучитьИдентификаторОбъекта();
				Если Сокрлп(Рез)="" Тогда
					Рез=0;
				КонецЕсли
				Если ТипЗначения(Рез)=1 Тогда
					Возврат Рез;
				Иначе
					Возврат "'"+Рез+"'";
				КонецЕсли
			Исключение
			КонецПопытки
		КонецЕсли
	КонецЕсли
	
	МасПоля=СписокПолей[ИмяАтрибутаСтр];
	Тип=МасПоля.Тип;
	ПривестиТипКБазеДанных(Тип,10,0);
	Если Врег(Тип)="ЧИСЛО" Тогда
		Возврат Число(Значение);
	Иначе
		Возврат "''";
	КонецЕсли
КонецФункции

//******************************************************************************************
Функция ПолучитьАгрегатныйОбъект(Знач ИдОбъекта)
	Перем Объект;
	//сначала ищем в буфере
	Если НайтиОбъект(ИдОбъекта,Объект)=1 Тогда
		 Возврат Объект;
	КонецЕсли

	ИдОбъекта=Число(ИдОбъекта);
	НомерВТаблице=Цел(ИдОбъекта/0x100000000);//выделяем старшие 4 байта
	Если НомерВТаблице=0 Тогда
		 Возврат ИдОбъекта;
	КонецЕсли
	
	
	ТипОбъектаСтр=глТаблицаТиповНом[НомерВТаблице];
	Если Сокрлп(ТипОбъектаСтр)<>"" Тогда
		Объект=СоздатьОбъект(ТипОбъектаСтр);
		Объект.УстановитьИдентификаторОбъекта(ИдОбъекта);
		ДобавитьОбъект(ИдОбъекта,Объект);//заполняем буфер
		Возврат Объект;
	КонецЕсли
	Если ИдОбъекта%0x100000000=0 Тогда
		Возврат "";
	КонецЕсли
	
	//Сообщить("Объект не найден " +НомерВТаблице+"/"+ИдОбъекта);
	Возврат  "Объект не найден <"+НомерВТаблице+"/"+ИдОбъекта+">";
КонецФункции


//___________________________________________________________________________________________
//Вызывается только один раз - после создания таблицы БД
Процедура УстановитьНачальныйНомерИД(Номер) Экспорт
	НомерВТаблице=Номер*0x100000000;
	ЗапросБД=СоздатьОбъект("БазаДанных");
	ЗапросБД.Запрос("INSERT INTO "+ИмяТаблицыОбъекта+" (ID) VALUES ("+НомерВТаблице+")");
	ЗапросБД.Запрос("DELETE FROM "+ИмяТаблицыОбъекта);
КонецПроцедуры

//___________________________________________________________________________________________
Процедура Инициализация(ТипВид)Экспорт
	Структура=глСписокСтруктурОбъектов[ТипВид];
	Если РазмерСтруктуры(Структура)=0 Тогда
		Ошибка("Неизвестный вид объекта: """+ТипВид+"""");
	КонецЕсли
	ТекущийТипОбъекта=ТипВид;
	СписокПолей=Структура.СписокПолей;
	ИмяТаблицыОбъекта=Структура.ИмяТаблицыОбъекта;
	НомерТаблицыОбъекта=Структура.НомерТаблицыОбъекта;
	ПрефиксТаблицыОбъекта=Структура.ПрефиксТаблицыОбъекта;
	СтрокаВыборкиПолейБД=Структура.СтрокаВыборкиПолейБД;
	ИмяИД=Структура.ИмяИД;
	ЭтоОбъект=Структура.ЭтоОбъект;
	БылаИнициализация=1;
КонецПроцедуры

//___________________________________________________________________________________________
Функция ИмяТаблицыОбъекта(ИмяРеквизита)Экспорт
	Возврат ИмяТаблицыОбъекта;
КонецФункции

//___________________________________________________________________________________________
Функция НомерТаблицыОбъекта()Экспорт
	Возврат НомерТаблицыОбъекта;
КонецФункции


//Функция ПолучитьТипОбъекта()Экспорт
//	 Возврат ТекущийТипОбъекта;
//КонецФункции


//___________________________________________________________________________________________
Функция Выбран()Экспорт
	Если ОбъектВыбран ИЛИ ИД Тогда
		Возврат 1;
	Иначе
		Возврат 0;
	КонецЕсли
КонецФункции


//___________________________________________________________________________________________
Функция ЭтоНовый()Экспорт
	Возврат Новый;
КонецФункции

//___________________________________________________________________________________________
Функция ВыбратьЭлементыБД(НачСтрока,ЧислоСтрок)Экспорт//Открыть выборку элементов таблицы БД
	ПРОВЕРКА_ИНИЦИАЛИЗАЦИИ;
	
	Если ТолькоЧтение=1 Тогда
		Ошибка("Объект доступен только на чтение");
	КонецЕсли
	
	Новый=0;
	СтрОграничитель="";
	Если НЕ ПустоеЗначение(НачСтрока) ИЛИ НЕ ПустоеЗначение(ОграничиватьВыборку) Тогда
		Если ТипСоединения()=ConnectionMySQL ИЛИ ТипСоединения()=ConnectionSQLLite Тогда//оператор LIMIT работает только на MySQL и SQLLite
			Если НЕ ПустоеЗначение(НачСтрока) Тогда
				Если ПустоеЗначение(ЧислоСтрок)=1 Тогда
					ЧислоСтрок=10;
				КонецЕсли;
				СтрОграничитель=" LIMIT "+НачСтрока+","+ЧислоСтрок;
			Иначе
				СтрОграничитель=" LIMIT "+ОграничиватьВыборку;
			КонецЕсли
		КонецЕсли
	КонецЕсли;
	
	Если ЭтоОбъект=1 Тогда
		СтрокаВыборки=СтрокаВыборкиПолейБД+",ID";

		ТекСортировка="";		
		Если ОбратныйПорядок Тогда
			ТекСортировка=" DESC";
		КонецЕсли
		
		Если ПустоеЗначение(СтрПолеАвтоУпорядочивания)=0 Тогда
			СтрУпорядочивание=" ORDER BY "+СтрПолеАвтоУпорядочивания+ТекСортировка+",ID";
		Иначе
			СтрУпорядочивание=" ORDER BY ID"+ТекСортировка;
		КонецЕсли
	Иначе
		СтрокаВыборки=СтрокаВыборкиПолейБД;
		Если ПустоеЗначение(СтрПолеАвтоУпорядочивания)=0 Тогда
			СтрУпорядочивание=" ORDER BY "+СтрПолеАвтоУпорядочивания;
		КонецЕсли
	КонецЕсли
	
	Возврат Запрос("SELECT "+СтрокаВыборки+" FROM "+ИмяТаблицыОбъекта+ПолучитьУсловияЗапроса()+СтрУпорядочивание+СтрОграничитель);
КонецФункции

//___________________________________________________________________________________________
Функция ПолучитьЭлемент()Экспорт
	Новый=0;
	ИД=0;
	ОбъектВыбран=ПолучитьСтроку();
	Если ОбъектВыбран Тогда
		ОбъектВыбран=1;
		Мас=ПолучитьЗначенияПолей();
		Для А=1 По РазмерСтруктуры(СписокПолей) Цикл
			Имя=СписокПолей.ИдентификаторПоНомеру(А);
			СписокЗначений[Имя]=ЗначениеИзСтр(Имя,Мас[А]);
		КонецЦикла
		Если ЭтоОбъект=1 Тогда
			ИД=Мас[РазмерМассива(Мас)];
		Иначе
			ИД=СписокЗначений[ИмяИД];
		КонецЕсли
		
//		ФлЗапрета=ВызватьСобытие("ПриВыборкеЭлементаБД",Контекст);
//		Если ФлЗапрета Тогда
//			 Возврат ПолучитьЭлемент();//выбираем следующий элемент
//		//иначе элемент для выборки разрешен или не стоит ни один обработчик события
//		КонецЕсли
	КонецЕсли

	
	Возврат ОбъектВыбран;
КонецФункции


//___________________________________________________________________________________________
Функция КоличествоЭлементов()Экспорт
	Возврат Число(ПолучитьЗначениеЗапроса("SELECT count(*) FROM "+ИмяТаблицыОбъекта+ПолучитьУсловияЗапроса()));
КонецФункции

//___________________________________________________________________________________________
Функция ТекущиеАтрибуты()Экспорт
	Возврат СписокЗначений;
КонецФункции

//___________________________________________________________________________________________
//Новая запись на основе старых данных
Процедура НоваяКопия()Экспорт
	ОбъектВыбран=0;
	ПроверитьВыбранностьОбъекта();
	Новый=1;
	ИД=0;
КонецПроцедуры

//___________________________________________________________________________________________
//Новая запись строки таблицы
Функция Новый()Экспорт
	СписокЗначений=СоздатьОбъект("Структура");

	ОбъектВыбран=0;
	Новый=1;
	ИД=0;
	
	Возврат 1;
КонецФункции

//___________________________________________________________________________________________
//Запись нового или отредактированного объекта (строки таблицы)
Функция Записать()Экспорт
	ПРОВЕРКА_ИНИЦИАЛИЗАЦИИ;

	Если ТолькоЧтение=1 Тогда
		Ошибка("Объект доступен только на чтение");
	КонецЕсли
		
	
	Если Новый=0 И НЕ ОбъектВыбран Тогда//автокорректировка - например возможен ввод нового элемента через диалог
		Новый=1;
	КонецЕсли
	
	//Регистрация изменений
	УстановитьАтрибут("#COUNTER",Число(ПолучитьАтрибут("#Counter"))+1);
	
	
	//ОчиститьБуфер();
	Если Новый=1 Тогда
		СтрДанных="";
		Для А=1 По РазмерСтруктуры(СписокПолей) Цикл
			Имя=СписокПолей.ИдентификаторПоНомеру(А);
			СтрДанных=СтрДанных+СтрИзЗначения(Имя,СписокЗначений[Имя])+",";
		КонецЦикла;
		СтрДанных=Лев(СтрДанных,СтрДлина(СтрДанных)-1);
		
		ТипСоединения=ТипСоединения();
		//		Если ТипСоединения=ConnectionSQLLite ИЛИ ТипСоединения=ConnectionSQLLite Тогда
		//			Запрос("INSERT INTO "+ИмяТаблицыОбъекта+"("+СтрокаВыборкиПолейБД+") VALUES ("+СтрДанных+")");
		//			Если ЭтоОбъект=1 Тогда//только для  MySQL
		//				ИД=Число(ПолучитьИдентификаторСтроки());
		//			КонецЕсли
		//		Иначе
		Если ТипСоединения()=ConnectionDBF Тогда
			Если ЭтоОбъект<>1 Тогда
				Удалить(1);
			КонецЕсли
		КонецЕсли
		
		СтрокаВыборки=СтрокаВыборкиПолейБД;
		Если ЭтоОбъект=1 Тогда
			ИД=0x100000000*НомерТаблицыОбъекта+Число(ПолучитьЗначениеЗапроса("SELECT max(id) FROM "+ИмяТаблицыОбъекта))%0x100000000+1;
			СтрокаВыборки=СтрокаВыборки+",ID";
			СтрДанных=СтрДанных+","+ИД;
		КонецЕсли
		
		Запрос("INSERT INTO "+ИмяТаблицыОбъекта+"("+СтрокаВыборки+") VALUES ("+СтрДанных+")");
		//КонецЕсли;
	Иначе
		СтрДанных="";
		Для А=1 По РазмерСтруктуры(СписокПолей) Цикл
			Имя=СписокПолей.ИдентификаторПоНомеру(А);
			СтрДанных=СтрДанных+СписокПолей[Имя].ИмяПоляБД+"="+СтрИзЗначения(Имя,СписокЗначений[Имя])+",";
		КонецЦикла;
		СтрДанных=Лев(СтрДанных,СтрДлина(СтрДанных)-1);
		СтрУсловия=" WHERE "+ПолучитьПолеИдентификатораВБД()+"="+ПолучитьИдентификаторОбъекта();
		
		Запрос("UPDATE "+ИмяТаблицыОбъекта+" SET "+СтрДанных+СтрУсловия);
	КонецЕсли;
	Новый=0;
	ОбъектВыбран=1;
	//Результат=ВызватьСобытие("ПослеЗаписиСправочника",ТекущийЭлемент());
	Возврат 1;
КонецФункции

//___________________________________________________________________________________________
//Удаление объекта (строки таблицы) из БД
Процедура Удалить(Режим)Экспорт Виртуально
	Если НЕ ЭтоОбъект Тогда
		Запрос("DELETE FROM "+ИмяТаблицыОбъекта+ПолучитьУсловияЗапроса());
		Возврат;
	КонецЕсли
	


	Если ТолькоЧтение=1 Тогда
		Ошибка("Объект доступен только на чтение");
	КонецЕсли

	Если ТипЗначения(Режим)=0 Тогда
		Режим=1;//по умолчанию непосредственное удаление
	КонецЕсли
	
	СтрУсловия=" WHERE "+ПолучитьПолеИдентификатораВБД()+"="+ПолучитьИдентификаторОбъекта();
	Если Режим Тогда
		Запрос("DELETE FROM "+ИмяТаблицыОбъекта+СтрУсловия);
		Новый=0;
		ОбъектВыбран=0;
	Иначе
		Запрос("UPDATE "+ИмяТаблицыОбъекта+" SET "+СписокПолей["#IsDel"].ИмяПоляБД+"=1 "+СтрУсловия);
	КонецЕсли
	//Результат=ВызватьСобытие("ПослеУдаленияСправочника",ТекущийЭлемент());
КонецПроцедуры

//___________________________________________________________________________________________
Процедура СнятьПометкуУдаления()Экспорт
	Если ТолькоЧтение=1 Тогда
		Ошибка("Объект доступен только на чтение");
	КонецЕсли

	СтрУсловия=" WHERE "+ПолучитьПолеИдентификатораВБД()+"="+ПолучитьИдентификаторОбъекта();
	Запрос("UPDATE "+ИмяТаблицыОбъекта+" SET "+СписокПолей["#IsDel"].ИмяПоляБД+"=0 "+СтрУсловия);
	//Результат=ВызватьСобытие("ПослеОтменыУдаленияСправочника",ТекущийЭлемент());
КонецПроцедуры//СнятьПометкуУдаления

//___________________________________________________________________________________________
Функция ПометкаУдаления()Экспорт
	Возврат Число(ПолучитьАтрибут("#IsDel"));
КонецФункции//ПометкаУдаления

//___________________________________________________________________________________________
//Поиск элемента в базе данных (по внутреннему идентификатору)
Функция НайтиЭлементВБД()Экспорт
	Перем ТекИД;
	ПРОВЕРКА_ИНИЦИАЛИЗАЦИИ;

//	Если ТолькоЧтение=1 Тогда
//		Ошибка("Объект доступен только на чтение");
//	КонецЕсли
	
	Если ЭтоОбъект=1 Тогда
		ТекИД=Число(ИД);
		Если Число(ИД)=0 Тогда
			 Возврат 0;
		КонецЕсли
		СтрУсловия=" WHERE "+ПолучитьПолеИдентификатораВБД()+"="+ТекИД;
		СтрокаВыборки=СтрокаВыборкиПолейБД+",ID";
	Иначе
		СтрУсловия=" WHERE "+ПолучитьПолеИдентификатораВБД()+"="+ПолучитьИдентификаторОбъекта();
		СтрокаВыборки=СтрокаВыборкиПолейБД;
	КонецЕсли
	Запрос("SELECT "+СтрокаВыборки+" FROM "+ИмяТаблицыОбъекта+СтрУсловия);
	Возврат ПолучитьЭлемент();
КонецФункции


//___________________________________________________________________________________________
//Позиционирование на заданный элемент
Функция НайтиЭлемент(Объект) Экспорт
	Если ЭтоОбъект<>1 Тогда
		Ошибка("Метод доступен только для объектов");
	КонецЕсли
	
	
	ОбъектВыбран=0;
	СписокЗначений=СоздатьОбъект("Структура");
	ИД=Объект.ПолучитьИдентификаторОбъекта();
	Если Объект.Выбран()=1 Тогда//объект уже спозиционирован и данные уже прочитаны из БД - поэтому только копируем из него данные
		Для А=1 По РазмерСтруктуры(СписокПолей) Цикл
			Имя=СписокПолей.ИдентификаторПоНомеру(А);
			СписокЗначений[Имя]=Объект.ПолучитьАтрибут(Имя);
		КонецЦикла;
		ОбъектВыбран=1;
	ИначеЕсли ИД<>0 Тогда
		НайтиЭлементВБД();
	Иначе
		Ошибка("Исходный объект не выбран");
	КонецЕсли
	Возврат ОбъектВыбран;
КонецФункции

Функция ТекущийЭлемент()Экспорт
	Если НЕ ОбъектВыбран Тогда
		Ошибка("Объект не спозиционирован");
	КонецЕсли
	
	//получаем из буфера...
	Возврат ПолучитьАгрегатныйОбъект(ПолучитьИдентификаторОбъекта());
	
//	НовОбъект=СоздатьОбъект(ТекущийТипОбъекта);
//	НовОбъект.НайтиЭлемент(Контекст);
//	Возврат НовОбъект;
КонецФункции


Процедура ПроверитьВыбранностьОбъекта()
	Если ЭтоОбъект И Новый=0 И НЕ ОбъектВыбран И ИД<>0 Тогда
		НайтиЭлементВБД();
	КонецЕсли
КонецПроцедуры

//___________________________________________________________________________________________
Функция ПолучитьКартинкуЭлемента()Экспорт
	Если ПометкаУдаления()=0 Тогда
		Возврат 4;
	Иначе
		Возврат 10;
	КонецЕсли
КонецФункции//ПолучитьКартинкуЭлемента

//___________________________________________________________________________________________
Функция ФормаОткрыта()Экспорт
	Возврат Открыт;
КонецФункции//Открыт

//___________________________________________________________________________________________
Процедура ОчиститьУсловия()Экспорт
	масУсловияВыборки=СоздатьОбъект("Структура");
КонецПроцедуры//ОчиститьУсловия

//___________________________________________________________________________________________
Процедура СброситьУсловие(Реквизит)Экспорт
	масУсловияВыборки[Реквизит]="";
КонецПроцедуры//СброситьУсловие

//___________________________________________________________________________________________
Процедура ЗадатьУсловие(Реквизит,Значение,ОператорСравнения="=")Экспорт
	Перем ТекУсловие;
	Если ПустоеЗначение(ОператорСравнения)=1 Тогда
		ОператорСравнения="=";
	КонецЕсли

	ТекУсловие=СоздатьОбъект("Массив");//задаем новую группу условий для заданного реквизита
	ТекУсловие[1]["Реквизит"]=Реквизит;
	ТекУсловие[1]["ОператорСравнения"]=ОператорСравнения;
	ТекУсловие[1]["Значение"]=Значение;
	масУсловияВыборки[Реквизит]=ТекУсловие;
КонецПроцедуры//ЗадатьУсловие
//___________________________________________________________________________________________
Процедура ДобавитьУсловие(Реквизит,Значение,ОператорСравнения="=")Экспорт
	Перем ТекУсловие;
	Перем НомерУсловия;
	Если ПустоеЗначение(ОператорСравнения)=1 Тогда
		ОператорСравнения="=";
	КонецЕсли
		
	ТекУсловие=масУсловияВыборки[Реквизит];
	НомерУсловия=РазмерМассива(ТекУсловие)+1;//добавляем новое условие для заданного реквизита
	
	ТекУсловие[НомерУсловия]["Реквизит"]=Реквизит;
	ТекУсловие[НомерУсловия]["ОператорСравнения"]=ОператорСравнения;
	ТекУсловие[НомерУсловия]["Значение"]=Значение;
	масУсловияВыборки[Реквизит]=ТекУсловие;
КонецПроцедуры//ДобавитьУсловие

//___________________________________________________________________________________________
Процедура УстановитьВладельца(Реквизит,Значение)Экспорт
	ЗадатьУсловие(Реквизит,Значение);
КонецПроцедуры//ИспользоватьВладельца

//___________________________________________________________________________________________
Функция ПолучитьУсловияЗапроса()//служебная функция
	Перем СтрУсловиеВыборки;
	КоличествоУсловийЗапроса=КоличествоУсловийЗапроса();
	Если КоличествоУсловийЗапроса Тогда
		СтрУсловиеВыборки=" WHERE ";
		Для А=1 По КоличествоУсловийЗапроса Цикл
			МасУсловий=масУсловияВыборки.ЗначениеПоНомеру(А);
			Для НомУсловия=1 По РазмерМассива(МасУсловий) Цикл
				ТекУсловие=МасУсловий[НомУсловия];
				СтрУсловиеВыборки=СтрУсловиеВыборки+ПолучитьИмяПоляБД(ТекУсловие.Реквизит)+ТекУсловие.ОператорСравнения+СтрИзЗначения(ТекУсловие.Реквизит,ТекУсловие.Значение);
				СтрУсловиеВыборки=СтрУсловиеВыборки+" AND ";
			КонецЦикла
		КонецЦикла
		СтрУсловиеВыборки=Лев(СтрУсловиеВыборки,СтрДлина(СтрУсловиеВыборки)-5);
		Возврат СтрУсловиеВыборки;
	КонецЕсли
	Возврат "";
КонецФункции//ПолучитьУсловияЗапроса

//___________________________________________________________________________________________
Функция КоличествоУсловийЗапроса()//служебная функция
	Возврат РазмерСтруктуры(масУсловияВыборки);
КонецФункции//КоличествоУсловийЗапроса

//___________________________________________________________________________________________
Процедура УдалитьПодчиненныеЭлементы()Экспорт
	Если КоличествоУсловийЗапроса()=0 Тогда
		Ошибка("Не задан владелец");
	КонецЕсли
	Запрос("DELETE FROM "+ИмяТаблицыОбъекта+ПолучитьУсловияЗапроса());
КонецПроцедуры//УдалитьПодчиненныеЭлементы

//___________________________________________________________________________________________
Процедура УстановитьПолеАвтоУпорядочивания(Реквизит1,Реквизит2="")Экспорт
	СтрПолеАвтоУпорядочивания="";
	Если ПустоеЗначение(Реквизит1)=0 Тогда
		СтрПолеАвтоУпорядочивания=ПолучитьИмяПоляБД(Реквизит1);
		Если ОбратныйПорядок Тогда
			СтрПолеАвтоУпорядочивания=СтрПолеАвтоУпорядочивания+" DESC";
		КонецЕсли
		Если ПустоеЗначение(Реквизит2)=0 Тогда
			СтрПолеАвтоУпорядочивания=СтрПолеАвтоУпорядочивания+","+ПолучитьИмяПоляБД(Реквизит2);
			Если ОбратныйПорядок Тогда
				СтрПолеАвтоУпорядочивания=СтрПолеАвтоУпорядочивания+" DESC";
			КонецЕсли
		КонецЕсли
	КонецЕсли
КонецПроцедуры//УстановитьПолеАвтоУпорядочивания

//___________________________________________________________________________________________
//Поддержка языка запросов, функция должна возвращать поле, которое имеет специальное представление (строка формата: ГГГГММЧЧччммсс + Прав(ИД,16), т.е. Год, Месяц, Число, час, минута, сек + 16 правых символов ИД объекта)
Функция ПолучитьПолеВременногоПозицианирования()Экспорт
	 Возврат "";
КонецФункции//ПолучитьПолеВременногоПозицианирования

//___________________________________________________________________________________________
//Поддержка языка запросов, функция должна возвращать имя поля, которое принимает одно из двух значений:
// "+"  - движение приход
// "-"  - движение расход
Функция ПолучитьПолеТипаДвижения()Экспорт
	 Возврат "";
КонецФункции//ПолучитьПолеТипаДвижения

//___________________________________________________________________________________________
//Поддержка работы с буфером объектов
Функция ТолькоЧтение(УстФлаг=-1)Экспорт
	ПредЗначение=ТолькоЧтение;
	Если Число(УстФлаг)>=0 Тогда
		ТолькоЧтение=УстФлаг;
	КонецЕсли
	Возврат ПредЗначение;
КонецФункции//ТолькоЧтение

//___________________________________________________________________________________________
Функция Актуальность(УстФлаг)Экспорт
	Перем Результат;
	
	Результат=ОбъектВыбран;
	ОбъектВыбран=УстФлаг;
	
	Возврат Результат;
КонецФункции//Актуальность


//___________________________________________________________________________________________
Функция ОбратныйПорядок(УстФлаг)Экспорт//Установить порядок выборки элементов БД
	Перем Результат;
	Если ТипЗначения(УстФлаг)=0 Тогда
		УстФлаг=1;
	КонецЕсли
	
	
	Результат=ОбратныйПорядок;
	ОбратныйПорядок=УстФлаг;
	
	Возврат Результат;
КонецФункции//ОбратныйПорядок

//___________________________________________________________________________________________
//возвращает строку формата ГГГГММЧЧччммсс + Прав(ИД,16), т.е. Год, Месяц, Число, час, минута, сек + 16 правых символов ИД объекта
Функция СформироватьПозициюОсиВремени(ДатаОбъета,ВремяОбъекта,Объект)Экспорт
	ТекВремя=СтрЗаменить(ВремяОбъекта,":","");;
	ИД=Объект.ПолучитьИдентификаторОбъекта();
	Возврат ДатаВСтроку(ДатаОбъета,ТекВремя)+Прав("0000000000000000"+ИД,16);
КонецФункции//СформироватьПозициюОсиВремени

//___________________________________________________________________________________________
Процедура ОграничиватьВыборку(НовНом)Экспорт
	ОграничиватьВыборку=Число(НовНом);
КонецПроцедуры//ОграничиватьВыборку

//
////___________________________________________________________________________________________
//Функция ВычислитьФункциюЗапроса(ИмяФункции,ИмяРеквизита)Экспорт
//	Перем ИмяПоляБД;
//	ИмяПоляБД=ИмяРеквизита;
//	Возврат ПолучитьЗначениеЗапроса("SELECT ");
//КонецФункции//ВычислитьФункциюЗапроса
