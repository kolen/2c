Перем Вид;
Перем ДиалоговыйЭлемент;
Перем ПодчиненныеРегистры[];//Буфер ранее уже созданных регистров для случая когда мы работем с общих регистром (без позиционирования на нужный вид)
Перем ТекущийДокумент;//Документ по которому будет двигаться текущий регистр
Перем ПозицияОсиВремени;//временная позиция текущего объекта(документа) движения (строка формата: ГГГГММЧЧччммсс + Прав(ИД,16), т.е. Год, Месяц, Число, час, минута, сек + 16 правых символов ИД объекта)
Перем НомерСтроки;

#Если _Отладка
Перем НомерОбъекта;
#КонецЕсли


Перем Приход Экспорт;
Перем Расход Экспорт;

//ПодчиненныеРегистры:Массив

//******************************************************************************************
//Предопределенные процедуры и функции объекта
//******************************************************************************************


//МАКРОСЫ
#Задать	ПРОВЕРКА_ВИДА_РЕГИСТРА Если ПустоеЗначение(Вид)=1 Тогда Ошибка("Не задан вид"); КонецЕсли
#Задать	ПРОВЕРКА_ДВИЖЕНИЯ Если ПустоеЗначение(ТекущийДокумент)=1 Тогда Ошибка("Не задан объект(документ) движения"); КонецЕсли


//МасПеречислений:Массив
//___________________________________________________________________________________________
//Динамическое получение атрибутов
Функция ПолучитьАтрибут(Имя) Экспорт

	//смотрим может конкретный вид регистра не выбран - работаем с набором регистров
	Если ПустоеЗначение(Вид)=1 Тогда
		ПроверитьВид(Имя);
		Если ПодчиненныеРегистры.НайтиИдентификатор(Имя) Тогда
			 Возврат ПодчиненныеРегистры[Имя];
		КонецЕсли
		Объект=СоздатьОбъект("Регистр."+Имя);
		ПодчиненныеРегистры[Имя]=Объект;
		Возврат Объект;
	КонецЕсли
	
	//работаем с набором атрибутов конкретного вида
	Возврат БазовыйОбъект.ПолучитьАтрибут(Имя);
КонецФункции

//___________________________________________________________________________________________
//Динамическое задание атрибутов
Процедура УстановитьАтрибут(Имя,Значение) Экспорт
	ПРОВЕРКА_ВИДА_РЕГИСТРА
	
	//работаем с набором атрибутов конкретного вида
	БазовыйОбъект.УстановитьАтрибут(Имя,Значение);
КонецПроцедуры

//___________________________________________________________________________________________
Функция ПолучитьИмяАтрибута(Номер)Экспорт
	//смотрим может конкретный вид регистра не выбран - работаем с набором регистров
	Если ПустоеЗначение(Вид)=1 Тогда
		Возврат МасВидов.ИдентификаторПоНомеру(Номер);
	КонецЕсли
	
	//работаем с набором атрибутов конкретного вида
	Возврат БазовыйОбъект.ПолучитьИмяАтрибута(Номер);
КонецФункции
//___________________________________________________________________________________________
Функция ПолучитьКоличествоАтрибутов()Экспорт
	//смотрим может конкретный вид регистра не выбран - работаем с набором регистров
	Если ПустоеЗначение(Вид)=1 Тогда
		Возврат РазмерСтруктуры(МасВидов);
	КонецЕсли
	
	//работаем с набором атрибутов конкретного вида
	Возврат БазовыйОбъект.ПолучитьКоличествоАтрибутов();
КонецФункции
//___________________________________________________________________________________________
//Установка внутреннего идентификатора (номера в БД) объекта 
//(или условное позиционирование объекта)
Процедура УстановитьИдентификаторОбъекта(НовИдентификатор)Экспорт
	Возврат;
КонецПроцедуры

//___________________________________________________________________________________________
//Получение внутреннего идентификатора объекта 
Функция ПолучитьИдентификаторОбъекта()Экспорт
	Возврат 0;
КонецФункции

//___________________________________________________________________________________________
//Строковое представление объекта
Функция ПолучитьПредставлениеОбъекта()Экспорт
	Возврат Вид;
КонецФункции


//___________________________________________________________________________________________
//Строковое значение типа объекта
Функция ПолучитьТипОбъекта()Экспорт
	 Возврат ТипОбъекта();
КонецФункции

//___________________________________________________________________________________________
//Конструктор (вызывается при инициализации объекта)
//ВидОбъекта - вид объекта, задающийся строкой следуемой за символом "."
//Параметр - произвольный параметр (для визуальных элементов - объект базового класса)
Процедура Конструктор(ВидОбъекта,Параметр)Экспорт
	Если ПустоеЗначение(ВидОбъекта)=0 Тогда
		Вид=ВидОбъекта;
		ПроверитьВид(Вид);
		Инициализация(ПолучитьТипОбъекта()+"."+Вид);
	КонецЕсли

	#Если _Отладка
		//Перем глНомерОбъекта Статично;
		глНомерОбъекта=Число(глНомерОбъекта)+1;
		НомерОбъекта=глНомерОбъекта;
		Сообщить("Создан объект номер "+НомерОбъекта);
	#КонецЕсли
		

	НомерСтроки=0;
		
	//поддержка визуального отображения значений на форме диалога
//	Если ТипЗначения(Параметр)=100 Тогда//визуальный элемент формы
//		ДиалоговыйЭлемент=Параметр;
//		ДиалоговыйЭлемент.Редактирование(0);
//	КонецЕсли;
КонецПроцедуры

//___________________________________________________________________________________________
//Деструктор (вызывается при удалении объекта)
//Процедура Деструктор()Экспорт
//
//КонецПроцедуры




//___________________________________________________________________________________________
//Обрабочик событий визуального объекта
//Возвращает:
//0 - событие не обработано (передается в форму для дальнейшей обработки)
//1 - событие обработано (далее в форму не передается)
Функция ОбработкаСобытия(ИмяСобытия) Экспорт//ИмяСобытия - имя события как оно задано в окне свойств конфигуратора
	Возврат 0;
КонецФункции

//___________________________________________________________________________________________
//Открытие стандартной формы редактирования объекта
Функция ОткрытьФормуОбъекта() Экспорт

КонецФункции
//___________________________________________________________________________________________
//Вызывается при открытии любой подчиненной формы
Процедура ОбработкаОткрытияФормы(Конт)Экспорт

КонецПроцедуры

//___________________________________________________________________________________________
//Возвращает текущий вид объекта (вызывается при выгрузке значения в строку)
Функция Вид() Экспорт
	Возврат Вид;
КонецФункции
//___________________________________________________________________________________________
Функция ПредставлениеВида()Экспорт
	Возврат Вид;
КонецФункции//ПредставлениеВида

//******************************************************************************************
//Внутренние процедуры и функции
//******************************************************************************************

//___________________________________________________________________________________________
Процедура ПроверитьВид(ИмяВида)
	Если МасВидов.НайтиИдентификатор(ИмяВида)=0 Тогда
		 Ошибка("Требуемый вид регистра не найден ("+ИмяВида+")");
	КонецЕсли
КонецПроцедуры//ПроверитьВид


//******************************************************************************************
//Методы объекта доступные через точку (процедуры и функции с признаком Экспорт)
//******************************************************************************************
//___________________________________________________________________________________________
Процедура ДвижениеПриходВыполнить()Экспорт
	ПРОВЕРКА_ВИДА_РЕГИСТРА;
	#Если _Отладка
		Сообщить("ДвижениеПриходВыполнить Объект номер "+НомерОбъекта);
	#КонецЕсли
	ПРОВЕРКА_ДВИЖЕНИЯ;
	
	УстановитьАтрибут("#ТипДвижения","+");
	УстановитьАтрибут("#ТекущийДокумент",ТекущийДокумент);
	УстановитьАтрибут("#НомерСтроки",НомерСтроки);
	УстановитьАтрибут("#ПозицияОсиВремени",ПозицияОсиВремени);
	НоваяКопия();
	Записать();
	
	//для регистров остатков здесь надо предусмотреть изменение таблицы актуальных остатков
КонецПроцедуры//ДвижениеПриходВыполнить

//___________________________________________________________________________________________
Процедура ДвижениеРасходВыполнить()Экспорт
	ПРОВЕРКА_ВИДА_РЕГИСТРА;
	ПРОВЕРКА_ДВИЖЕНИЯ;

	УстановитьАтрибут("#ТипДвижения","-");
	УстановитьАтрибут("#ТекущийДокумент",ТекущийДокумент);
	УстановитьАтрибут("#НомерСтроки",НомерСтроки);
	УстановитьАтрибут("#ПозицияОсиВремени",ПозицияОсиВремени);
	НоваяКопия();
	Записать();

	//для регистров остатков здесь надо предусмотреть изменение таблицы актуальных остатков
КонецПроцедуры//ДвижениеРасходВыполнить



//___________________________________________________________________________________________
Процедура ПривязатьСтроку(Ном)Экспорт
	 НомерСтроки=Ном;
КонецПроцедуры//ПривязатьСтроку

//___________________________________________________________________________________________
Процедура ПривязатьКонтекст(Док,Позиция="")Экспорт
#Если _Отладка
	Сообщить("ПривязатьКонтекст Объект номер "+НомерОбъекта);
#КонецЕсли
	Если ПустоеЗначение(Вид)=1 Тогда
		Для А=1 По ПолучитьКоличествоАтрибутов() Цикл
			ТекРегистр=ПолучитьАтрибут(ПолучитьИмяАтрибута(А));
			ТекРегистр.ПривязатьКонтекст(Док);
		КонецЦикла
	Иначе
		ТекущийДокумент=Док;
		ПозицияОсиВремени=Позиция;
		
		Если ТипЗначения(ПозицияОсиВремени)=0 Тогда//значение позиции не задано - формируем на основе значения переданного документа
			ПозицияОсиВремени=СформироватьПозициюОсиВремени(ТекущийДокумент.ДатаДок,ТекущийДокумент.ПолучитьВремяДокумента(),ТекущийДокумент);
		КонецЕсли
		
		УстановитьВладельца("#ТекущийДокумент",Док);
	КонецЕсли
КонецПроцедуры//ПривязатьКонтекст

//___________________________________________________________________________________________
Процедура УдалитьДвижения(Знач Док)Экспорт
	 Если ПустоеЗначение(Вид)=1 Тогда
	 	Для А=1 По РазмерСтруктуры(ПодчиненныеРегистры) Цикл
	 		ТекРегистр=ПодчиненныеРегистры.ЗначениеПоНомеру(А);
	 		ТекРегистр.УдалитьДвижения(Док);
	 	КонецЦикла
	 Иначе
		 Если ПустоеЗначение(Док)=1 Тогда
		 	 Док=ТекущийДокумент;
		 КонецЕсли
		 Если ПустоеЗначение(Док)=1 Тогда
		 	 Ошибка("Не задан объект(документ) по которому удаляются движения");
		 КонецЕсли

 		УстановитьВладельца("#ТекущийДокумент",Док);
		УдалитьПодчиненныеЭлементы();
		 
	 
		//для регистров остатков здесь надо предусмотреть изменение таблицы актуальных остатков
	 КонецЕсли
КонецПроцедуры//УдалитьДвижения


//___________________________________________________________________________________________
//Поддержка языка запросов, функция должна возвращать поле, которое имеет специальное представление (строка формата: ГГГГММЧЧччммсс + Прав(ИД,16), т.е. Год, Месяц, Число, час, минута, сек + 16 правых символов ИД объекта)
Функция ПолучитьПолеВременногоПозицианирования()Экспорт
	 Возврат "#ПозицияОсиВремени";
КонецФункции//ПолучитьПолеВременногоПозицианирования

//___________________________________________________________________________________________
//Поддержка языка запросов, функция должна возвращать имя поля, которое принимает одно из двух значений:
// "+"  - движение приход
// "-"  - движение расход
Функция ПолучитьПолеТипаДвижения()Экспорт
	 Возврат "#ТипДвижения";
КонецФункции//ПолучитьПолеТипаДвижения


//___________________________________________________________________________________________
Функция ВыбратьДвиженияДокумента(Документ)Экспорт
	ЗадатьУсловие("#ТекущийДокумент",Документ);
	Рез=ВыбратьЭлементыБД(0,0);
	СброситьУсловие("#ТекущийДокумент");
	Возврат Рез;
КонецФункции//ВыбратьДвиженияДокумента

//___________________________________________________________________________________________
Функция ВыбратьДвижения(ДатаНачала,ДатаКонца)Экспорт
	СброситьУсловие("#ПозицияОсиВремени");
	Если ТипЗначения(ДатаНачала) Тогда
		ДобавитьУсловие("#ПозицияОсиВремени",ДатаВСтроку(ДатаНачала),">=");
	КонецЕсли
	Если ТипЗначения(ДатаКонца) Тогда
		ДобавитьУсловие("#ПозицияОсиВремени",ДатаВСтроку(ДатаКонца),"<=");
	КонецЕсли
	Рез=ВыбратьЭлементыБД(0,0);
	СброситьУсловие("#ПозицияОсиВремени");
	Возврат Рез;
КонецФункции//ВыбратьДвижения

//___________________________________________________________________________________________
Функция ТекущийДокумент()Экспорт
	 Возврат ПолучитьАтрибут("#ТекущийДокумент");
КонецФункции//ТекущийДокумент

//___________________________________________________________________________________________
Функция НомерСтроки()Экспорт
	 Возврат ПолучитьАтрибут("#НомерСтроки");
КонецФункции//НомерСтроки

//___________________________________________________________________________________________
Функция ПолучитьДвижение()Экспорт
	Рез=ПолучитьЭлемент();
	Расход=?(ПолучитьАтрибут("#ТипДвижения")="-",1,0);
	Приход=1-Расход;
	Возврат Рез;
КонецФункции//ПолучитьДвижение

//___________________________________________________________________________________________
Процедура НазначитьТип()Экспорт//рудимент оставленный для совместимости
КонецПроцедуры//НазначитьТип

//___________________________________________________________________________________________
//Метод ограничен 10 реквизитами и измерениями!!!!
Процедура УстановитьФильтр(Парам1,Парам2,Парам3,Парам4,Парам5,Парам6,Парам7,Парам8,Парам9,Парам10)Экспорт//УстановитьФильтр(<Измерение1>,<Измерение2>...,<Рекв1>,<Рекв2>) - Назначить фильтр для оптимизации действий с регистром
	Ном=0;
	Мас=ПолучитьМассивАтрибутов();
	МасИзмерений=Мас["Измерения"];
	Для А=1 По РазмерСтруктуры(МасИзмерений) Цикл
		Ном=Ном+1;
		Значение=Выражение("Парам"+Число(Ном));
		ИмяПоля=МасИзмерений.ИдентификаторПоНомеру(А);
		ЗадатьУсловие(ИмяПоля,Значение);
	КонецЦикла

	МасРеквизитов=Мас["Реквизиты"];
	Для А=1 По РазмерСтруктуры(МасРеквизитов) Цикл
		Ном=Ном+1;
		Значение=Выражение("Парам"+Число(Ном));
		ИмяПоля=МасРеквизитов.ИдентификаторПоНомеру(А);
		ЗадатьУсловие(ИмяПоля,Значение);
	КонецЦикла
КонецПроцедуры//УстановитьФильтр

//___________________________________________________________________________________________
Процедура УстановитьЗначениеФильтра(ИмяПоля,Значение,Вариант)Экспорт
	ЗадатьУсловие(ИмяПоля,Значение);
КонецПроцедуры//УстановитьЗначениеФильтра


//___________________________________________________________________________________________
Процедура Тест()Экспорт
	 Сообщить("Тест");
КонецПроцедуры//Тест

//___________________________________________________________________________________________
Функция ПолучитьМассивАтрибутов()
	Возврат СоздатьОбъект("Метаданные").Массив["Метаданные"][ТипОбъекта()][Вид];
КонецФункции//ПолучитьМассивАтрибутов
